// Code generated by ent, DO NOT EDIT.

package itemordem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the itemordem type in the database.
	Label = "item_ordem"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuantidade holds the string denoting the quantidade field in the database.
	FieldQuantidade = "quantidade"
	// FieldPreco holds the string denoting the preco field in the database.
	FieldPreco = "preco"
	// FieldOrdemID holds the string denoting the ordem_id field in the database.
	FieldOrdemID = "ordem_id"
	// FieldProdutoID holds the string denoting the produto_id field in the database.
	FieldProdutoID = "produto_id"
	// EdgeOrdem holds the string denoting the ordem edge name in mutations.
	EdgeOrdem = "ordem"
	// EdgeProduto holds the string denoting the produto edge name in mutations.
	EdgeProduto = "produto"
	// Table holds the table name of the itemordem in the database.
	Table = "item_ordems"
	// OrdemTable is the table that holds the ordem relation/edge.
	OrdemTable = "item_ordems"
	// OrdemInverseTable is the table name for the Ordem entity.
	// It exists in this package in order to avoid circular dependency with the "ordem" package.
	OrdemInverseTable = "ordems"
	// OrdemColumn is the table column denoting the ordem relation/edge.
	OrdemColumn = "ordem_id"
	// ProdutoTable is the table that holds the produto relation/edge.
	ProdutoTable = "item_ordems"
	// ProdutoInverseTable is the table name for the Produto entity.
	// It exists in this package in order to avoid circular dependency with the "produto" package.
	ProdutoInverseTable = "produtos"
	// ProdutoColumn is the table column denoting the produto relation/edge.
	ProdutoColumn = "produto_id"
)

// Columns holds all SQL columns for itemordem fields.
var Columns = []string{
	FieldID,
	FieldQuantidade,
	FieldPreco,
	FieldOrdemID,
	FieldProdutoID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ItemOrdem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQuantidade orders the results by the quantidade field.
func ByQuantidade(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantidade, opts...).ToFunc()
}

// ByPreco orders the results by the preco field.
func ByPreco(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreco, opts...).ToFunc()
}

// ByOrdemID orders the results by the ordem_id field.
func ByOrdemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrdemID, opts...).ToFunc()
}

// ByProdutoID orders the results by the produto_id field.
func ByProdutoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProdutoID, opts...).ToFunc()
}

// ByOrdemField orders the results by ordem field.
func ByOrdemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrdemStep(), sql.OrderByField(field, opts...))
	}
}

// ByProdutoField orders the results by produto field.
func ByProdutoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProdutoStep(), sql.OrderByField(field, opts...))
	}
}
func newOrdemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrdemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrdemTable, OrdemColumn),
	)
}
func newProdutoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProdutoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProdutoTable, ProdutoColumn),
	)
}
