// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jmrflora/bazarTudao/ent/predicate"
	"github.com/jmrflora/bazarTudao/ent/produto"
	"github.com/jmrflora/bazarTudao/ent/stock"
)

// StockUpdate is the builder for updating Stock entities.
type StockUpdate struct {
	config
	hooks    []Hook
	mutation *StockMutation
}

// Where appends a list predicates to the StockUpdate builder.
func (su *StockUpdate) Where(ps ...predicate.Stock) *StockUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetDataMovimento sets the "data_movimento" field.
func (su *StockUpdate) SetDataMovimento(t time.Time) *StockUpdate {
	su.mutation.SetDataMovimento(t)
	return su
}

// SetNillableDataMovimento sets the "data_movimento" field if the given value is not nil.
func (su *StockUpdate) SetNillableDataMovimento(t *time.Time) *StockUpdate {
	if t != nil {
		su.SetDataMovimento(*t)
	}
	return su
}

// SetQuantidade sets the "quantidade" field.
func (su *StockUpdate) SetQuantidade(i int) *StockUpdate {
	su.mutation.ResetQuantidade()
	su.mutation.SetQuantidade(i)
	return su
}

// SetNillableQuantidade sets the "quantidade" field if the given value is not nil.
func (su *StockUpdate) SetNillableQuantidade(i *int) *StockUpdate {
	if i != nil {
		su.SetQuantidade(*i)
	}
	return su
}

// AddQuantidade adds i to the "quantidade" field.
func (su *StockUpdate) AddQuantidade(i int) *StockUpdate {
	su.mutation.AddQuantidade(i)
	return su
}

// SetProdutosID sets the "produtos" edge to the Produto entity by ID.
func (su *StockUpdate) SetProdutosID(id int) *StockUpdate {
	su.mutation.SetProdutosID(id)
	return su
}

// SetNillableProdutosID sets the "produtos" edge to the Produto entity by ID if the given value is not nil.
func (su *StockUpdate) SetNillableProdutosID(id *int) *StockUpdate {
	if id != nil {
		su = su.SetProdutosID(*id)
	}
	return su
}

// SetProdutos sets the "produtos" edge to the Produto entity.
func (su *StockUpdate) SetProdutos(p *Produto) *StockUpdate {
	return su.SetProdutosID(p.ID)
}

// Mutation returns the StockMutation object of the builder.
func (su *StockUpdate) Mutation() *StockMutation {
	return su.mutation
}

// ClearProdutos clears the "produtos" edge to the Produto entity.
func (su *StockUpdate) ClearProdutos() *StockUpdate {
	su.mutation.ClearProdutos()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StockUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StockUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StockUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StockUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(stock.Table, stock.Columns, sqlgraph.NewFieldSpec(stock.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.DataMovimento(); ok {
		_spec.SetField(stock.FieldDataMovimento, field.TypeTime, value)
	}
	if value, ok := su.mutation.Quantidade(); ok {
		_spec.SetField(stock.FieldQuantidade, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedQuantidade(); ok {
		_spec.AddField(stock.FieldQuantidade, field.TypeInt, value)
	}
	if su.mutation.ProdutosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.ProdutosTable,
			Columns: []string{stock.ProdutosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProdutosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.ProdutosTable,
			Columns: []string{stock.ProdutosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StockUpdateOne is the builder for updating a single Stock entity.
type StockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StockMutation
}

// SetDataMovimento sets the "data_movimento" field.
func (suo *StockUpdateOne) SetDataMovimento(t time.Time) *StockUpdateOne {
	suo.mutation.SetDataMovimento(t)
	return suo
}

// SetNillableDataMovimento sets the "data_movimento" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableDataMovimento(t *time.Time) *StockUpdateOne {
	if t != nil {
		suo.SetDataMovimento(*t)
	}
	return suo
}

// SetQuantidade sets the "quantidade" field.
func (suo *StockUpdateOne) SetQuantidade(i int) *StockUpdateOne {
	suo.mutation.ResetQuantidade()
	suo.mutation.SetQuantidade(i)
	return suo
}

// SetNillableQuantidade sets the "quantidade" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableQuantidade(i *int) *StockUpdateOne {
	if i != nil {
		suo.SetQuantidade(*i)
	}
	return suo
}

// AddQuantidade adds i to the "quantidade" field.
func (suo *StockUpdateOne) AddQuantidade(i int) *StockUpdateOne {
	suo.mutation.AddQuantidade(i)
	return suo
}

// SetProdutosID sets the "produtos" edge to the Produto entity by ID.
func (suo *StockUpdateOne) SetProdutosID(id int) *StockUpdateOne {
	suo.mutation.SetProdutosID(id)
	return suo
}

// SetNillableProdutosID sets the "produtos" edge to the Produto entity by ID if the given value is not nil.
func (suo *StockUpdateOne) SetNillableProdutosID(id *int) *StockUpdateOne {
	if id != nil {
		suo = suo.SetProdutosID(*id)
	}
	return suo
}

// SetProdutos sets the "produtos" edge to the Produto entity.
func (suo *StockUpdateOne) SetProdutos(p *Produto) *StockUpdateOne {
	return suo.SetProdutosID(p.ID)
}

// Mutation returns the StockMutation object of the builder.
func (suo *StockUpdateOne) Mutation() *StockMutation {
	return suo.mutation
}

// ClearProdutos clears the "produtos" edge to the Produto entity.
func (suo *StockUpdateOne) ClearProdutos() *StockUpdateOne {
	suo.mutation.ClearProdutos()
	return suo
}

// Where appends a list predicates to the StockUpdate builder.
func (suo *StockUpdateOne) Where(ps ...predicate.Stock) *StockUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StockUpdateOne) Select(field string, fields ...string) *StockUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stock entity.
func (suo *StockUpdateOne) Save(ctx context.Context) (*Stock, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StockUpdateOne) SaveX(ctx context.Context) *Stock {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StockUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StockUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StockUpdateOne) sqlSave(ctx context.Context) (_node *Stock, err error) {
	_spec := sqlgraph.NewUpdateSpec(stock.Table, stock.Columns, sqlgraph.NewFieldSpec(stock.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stock.FieldID)
		for _, f := range fields {
			if !stock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.DataMovimento(); ok {
		_spec.SetField(stock.FieldDataMovimento, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Quantidade(); ok {
		_spec.SetField(stock.FieldQuantidade, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedQuantidade(); ok {
		_spec.AddField(stock.FieldQuantidade, field.TypeInt, value)
	}
	if suo.mutation.ProdutosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.ProdutosTable,
			Columns: []string{stock.ProdutosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProdutosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.ProdutosTable,
			Columns: []string{stock.ProdutosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stock{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
