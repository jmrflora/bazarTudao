// Code generated by ent, DO NOT EDIT.

package produto

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jmrflora/bazarTudao/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Produto {
	return predicate.Produto(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Produto {
	return predicate.Produto(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Produto {
	return predicate.Produto(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Produto {
	return predicate.Produto(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Produto {
	return predicate.Produto(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Produto {
	return predicate.Produto(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Produto {
	return predicate.Produto(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Produto {
	return predicate.Produto(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Produto {
	return predicate.Produto(sql.FieldLTE(FieldID, id))
}

// Sku applies equality check predicate on the "sku" field. It's identical to SkuEQ.
func Sku(v string) predicate.Produto {
	return predicate.Produto(sql.FieldEQ(FieldSku, v))
}

// Nome applies equality check predicate on the "nome" field. It's identical to NomeEQ.
func Nome(v string) predicate.Produto {
	return predicate.Produto(sql.FieldEQ(FieldNome, v))
}

// QuantNoEstoque applies equality check predicate on the "quant_no_estoque" field. It's identical to QuantNoEstoqueEQ.
func QuantNoEstoque(v int) predicate.Produto {
	return predicate.Produto(sql.FieldEQ(FieldQuantNoEstoque, v))
}

// SkuEQ applies the EQ predicate on the "sku" field.
func SkuEQ(v string) predicate.Produto {
	return predicate.Produto(sql.FieldEQ(FieldSku, v))
}

// SkuNEQ applies the NEQ predicate on the "sku" field.
func SkuNEQ(v string) predicate.Produto {
	return predicate.Produto(sql.FieldNEQ(FieldSku, v))
}

// SkuIn applies the In predicate on the "sku" field.
func SkuIn(vs ...string) predicate.Produto {
	return predicate.Produto(sql.FieldIn(FieldSku, vs...))
}

// SkuNotIn applies the NotIn predicate on the "sku" field.
func SkuNotIn(vs ...string) predicate.Produto {
	return predicate.Produto(sql.FieldNotIn(FieldSku, vs...))
}

// SkuGT applies the GT predicate on the "sku" field.
func SkuGT(v string) predicate.Produto {
	return predicate.Produto(sql.FieldGT(FieldSku, v))
}

// SkuGTE applies the GTE predicate on the "sku" field.
func SkuGTE(v string) predicate.Produto {
	return predicate.Produto(sql.FieldGTE(FieldSku, v))
}

// SkuLT applies the LT predicate on the "sku" field.
func SkuLT(v string) predicate.Produto {
	return predicate.Produto(sql.FieldLT(FieldSku, v))
}

// SkuLTE applies the LTE predicate on the "sku" field.
func SkuLTE(v string) predicate.Produto {
	return predicate.Produto(sql.FieldLTE(FieldSku, v))
}

// SkuContains applies the Contains predicate on the "sku" field.
func SkuContains(v string) predicate.Produto {
	return predicate.Produto(sql.FieldContains(FieldSku, v))
}

// SkuHasPrefix applies the HasPrefix predicate on the "sku" field.
func SkuHasPrefix(v string) predicate.Produto {
	return predicate.Produto(sql.FieldHasPrefix(FieldSku, v))
}

// SkuHasSuffix applies the HasSuffix predicate on the "sku" field.
func SkuHasSuffix(v string) predicate.Produto {
	return predicate.Produto(sql.FieldHasSuffix(FieldSku, v))
}

// SkuEqualFold applies the EqualFold predicate on the "sku" field.
func SkuEqualFold(v string) predicate.Produto {
	return predicate.Produto(sql.FieldEqualFold(FieldSku, v))
}

// SkuContainsFold applies the ContainsFold predicate on the "sku" field.
func SkuContainsFold(v string) predicate.Produto {
	return predicate.Produto(sql.FieldContainsFold(FieldSku, v))
}

// NomeEQ applies the EQ predicate on the "nome" field.
func NomeEQ(v string) predicate.Produto {
	return predicate.Produto(sql.FieldEQ(FieldNome, v))
}

// NomeNEQ applies the NEQ predicate on the "nome" field.
func NomeNEQ(v string) predicate.Produto {
	return predicate.Produto(sql.FieldNEQ(FieldNome, v))
}

// NomeIn applies the In predicate on the "nome" field.
func NomeIn(vs ...string) predicate.Produto {
	return predicate.Produto(sql.FieldIn(FieldNome, vs...))
}

// NomeNotIn applies the NotIn predicate on the "nome" field.
func NomeNotIn(vs ...string) predicate.Produto {
	return predicate.Produto(sql.FieldNotIn(FieldNome, vs...))
}

// NomeGT applies the GT predicate on the "nome" field.
func NomeGT(v string) predicate.Produto {
	return predicate.Produto(sql.FieldGT(FieldNome, v))
}

// NomeGTE applies the GTE predicate on the "nome" field.
func NomeGTE(v string) predicate.Produto {
	return predicate.Produto(sql.FieldGTE(FieldNome, v))
}

// NomeLT applies the LT predicate on the "nome" field.
func NomeLT(v string) predicate.Produto {
	return predicate.Produto(sql.FieldLT(FieldNome, v))
}

// NomeLTE applies the LTE predicate on the "nome" field.
func NomeLTE(v string) predicate.Produto {
	return predicate.Produto(sql.FieldLTE(FieldNome, v))
}

// NomeContains applies the Contains predicate on the "nome" field.
func NomeContains(v string) predicate.Produto {
	return predicate.Produto(sql.FieldContains(FieldNome, v))
}

// NomeHasPrefix applies the HasPrefix predicate on the "nome" field.
func NomeHasPrefix(v string) predicate.Produto {
	return predicate.Produto(sql.FieldHasPrefix(FieldNome, v))
}

// NomeHasSuffix applies the HasSuffix predicate on the "nome" field.
func NomeHasSuffix(v string) predicate.Produto {
	return predicate.Produto(sql.FieldHasSuffix(FieldNome, v))
}

// NomeEqualFold applies the EqualFold predicate on the "nome" field.
func NomeEqualFold(v string) predicate.Produto {
	return predicate.Produto(sql.FieldEqualFold(FieldNome, v))
}

// NomeContainsFold applies the ContainsFold predicate on the "nome" field.
func NomeContainsFold(v string) predicate.Produto {
	return predicate.Produto(sql.FieldContainsFold(FieldNome, v))
}

// QuantNoEstoqueEQ applies the EQ predicate on the "quant_no_estoque" field.
func QuantNoEstoqueEQ(v int) predicate.Produto {
	return predicate.Produto(sql.FieldEQ(FieldQuantNoEstoque, v))
}

// QuantNoEstoqueNEQ applies the NEQ predicate on the "quant_no_estoque" field.
func QuantNoEstoqueNEQ(v int) predicate.Produto {
	return predicate.Produto(sql.FieldNEQ(FieldQuantNoEstoque, v))
}

// QuantNoEstoqueIn applies the In predicate on the "quant_no_estoque" field.
func QuantNoEstoqueIn(vs ...int) predicate.Produto {
	return predicate.Produto(sql.FieldIn(FieldQuantNoEstoque, vs...))
}

// QuantNoEstoqueNotIn applies the NotIn predicate on the "quant_no_estoque" field.
func QuantNoEstoqueNotIn(vs ...int) predicate.Produto {
	return predicate.Produto(sql.FieldNotIn(FieldQuantNoEstoque, vs...))
}

// QuantNoEstoqueGT applies the GT predicate on the "quant_no_estoque" field.
func QuantNoEstoqueGT(v int) predicate.Produto {
	return predicate.Produto(sql.FieldGT(FieldQuantNoEstoque, v))
}

// QuantNoEstoqueGTE applies the GTE predicate on the "quant_no_estoque" field.
func QuantNoEstoqueGTE(v int) predicate.Produto {
	return predicate.Produto(sql.FieldGTE(FieldQuantNoEstoque, v))
}

// QuantNoEstoqueLT applies the LT predicate on the "quant_no_estoque" field.
func QuantNoEstoqueLT(v int) predicate.Produto {
	return predicate.Produto(sql.FieldLT(FieldQuantNoEstoque, v))
}

// QuantNoEstoqueLTE applies the LTE predicate on the "quant_no_estoque" field.
func QuantNoEstoqueLTE(v int) predicate.Produto {
	return predicate.Produto(sql.FieldLTE(FieldQuantNoEstoque, v))
}

// HasOrdens applies the HasEdge predicate on the "ordens" edge.
func HasOrdens() predicate.Produto {
	return predicate.Produto(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OrdensTable, OrdensPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdensWith applies the HasEdge predicate on the "ordens" edge with a given conditions (other predicates).
func HasOrdensWith(preds ...predicate.Ordem) predicate.Produto {
	return predicate.Produto(func(s *sql.Selector) {
		step := newOrdensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStock applies the HasEdge predicate on the "stock" edge.
func HasStock() predicate.Produto {
	return predicate.Produto(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StockTable, StockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStockWith applies the HasEdge predicate on the "stock" edge with a given conditions (other predicates).
func HasStockWith(preds ...predicate.Stock) predicate.Produto {
	return predicate.Produto(func(s *sql.Selector) {
		step := newStockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItens applies the HasEdge predicate on the "itens" edge.
func HasItens() predicate.Produto {
	return predicate.Produto(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ItensTable, ItensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItensWith applies the HasEdge predicate on the "itens" edge with a given conditions (other predicates).
func HasItensWith(preds ...predicate.ItemOrdem) predicate.Produto {
	return predicate.Produto(func(s *sql.Selector) {
		step := newItensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Produto) predicate.Produto {
	return predicate.Produto(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Produto) predicate.Produto {
	return predicate.Produto(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Produto) predicate.Produto {
	return predicate.Produto(sql.NotPredicates(p))
}
