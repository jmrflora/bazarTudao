// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jmrflora/bazarTudao/ent/envio"
	"github.com/jmrflora/bazarTudao/ent/itemordem"
	"github.com/jmrflora/bazarTudao/ent/ordem"
	"github.com/jmrflora/bazarTudao/ent/produto"
)

// ItemOrdemCreate is the builder for creating a ItemOrdem entity.
type ItemOrdemCreate struct {
	config
	mutation *ItemOrdemMutation
	hooks    []Hook
}

// SetQuantidade sets the "quantidade" field.
func (ioc *ItemOrdemCreate) SetQuantidade(i int) *ItemOrdemCreate {
	ioc.mutation.SetQuantidade(i)
	return ioc
}

// SetPrecoUnitario sets the "preco_unitario" field.
func (ioc *ItemOrdemCreate) SetPrecoUnitario(f float64) *ItemOrdemCreate {
	ioc.mutation.SetPrecoUnitario(f)
	return ioc
}

// SetPrecoTotal sets the "preco_total" field.
func (ioc *ItemOrdemCreate) SetPrecoTotal(f float64) *ItemOrdemCreate {
	ioc.mutation.SetPrecoTotal(f)
	return ioc
}

// SetOrdemID sets the "ordem_id" field.
func (ioc *ItemOrdemCreate) SetOrdemID(i int) *ItemOrdemCreate {
	ioc.mutation.SetOrdemID(i)
	return ioc
}

// SetProdutoID sets the "produto_id" field.
func (ioc *ItemOrdemCreate) SetProdutoID(i int) *ItemOrdemCreate {
	ioc.mutation.SetProdutoID(i)
	return ioc
}

// SetOrdem sets the "ordem" edge to the Ordem entity.
func (ioc *ItemOrdemCreate) SetOrdem(o *Ordem) *ItemOrdemCreate {
	return ioc.SetOrdemID(o.ID)
}

// SetProduto sets the "produto" edge to the Produto entity.
func (ioc *ItemOrdemCreate) SetProduto(p *Produto) *ItemOrdemCreate {
	return ioc.SetProdutoID(p.ID)
}

// SetEnvioID sets the "envio" edge to the Envio entity by ID.
func (ioc *ItemOrdemCreate) SetEnvioID(id int) *ItemOrdemCreate {
	ioc.mutation.SetEnvioID(id)
	return ioc
}

// SetNillableEnvioID sets the "envio" edge to the Envio entity by ID if the given value is not nil.
func (ioc *ItemOrdemCreate) SetNillableEnvioID(id *int) *ItemOrdemCreate {
	if id != nil {
		ioc = ioc.SetEnvioID(*id)
	}
	return ioc
}

// SetEnvio sets the "envio" edge to the Envio entity.
func (ioc *ItemOrdemCreate) SetEnvio(e *Envio) *ItemOrdemCreate {
	return ioc.SetEnvioID(e.ID)
}

// Mutation returns the ItemOrdemMutation object of the builder.
func (ioc *ItemOrdemCreate) Mutation() *ItemOrdemMutation {
	return ioc.mutation
}

// Save creates the ItemOrdem in the database.
func (ioc *ItemOrdemCreate) Save(ctx context.Context) (*ItemOrdem, error) {
	return withHooks(ctx, ioc.sqlSave, ioc.mutation, ioc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ioc *ItemOrdemCreate) SaveX(ctx context.Context) *ItemOrdem {
	v, err := ioc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ioc *ItemOrdemCreate) Exec(ctx context.Context) error {
	_, err := ioc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ioc *ItemOrdemCreate) ExecX(ctx context.Context) {
	if err := ioc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ioc *ItemOrdemCreate) check() error {
	if _, ok := ioc.mutation.Quantidade(); !ok {
		return &ValidationError{Name: "quantidade", err: errors.New(`ent: missing required field "ItemOrdem.quantidade"`)}
	}
	if _, ok := ioc.mutation.PrecoUnitario(); !ok {
		return &ValidationError{Name: "preco_unitario", err: errors.New(`ent: missing required field "ItemOrdem.preco_unitario"`)}
	}
	if _, ok := ioc.mutation.PrecoTotal(); !ok {
		return &ValidationError{Name: "preco_total", err: errors.New(`ent: missing required field "ItemOrdem.preco_total"`)}
	}
	if _, ok := ioc.mutation.OrdemID(); !ok {
		return &ValidationError{Name: "ordem_id", err: errors.New(`ent: missing required field "ItemOrdem.ordem_id"`)}
	}
	if _, ok := ioc.mutation.ProdutoID(); !ok {
		return &ValidationError{Name: "produto_id", err: errors.New(`ent: missing required field "ItemOrdem.produto_id"`)}
	}
	if _, ok := ioc.mutation.OrdemID(); !ok {
		return &ValidationError{Name: "ordem", err: errors.New(`ent: missing required edge "ItemOrdem.ordem"`)}
	}
	if _, ok := ioc.mutation.ProdutoID(); !ok {
		return &ValidationError{Name: "produto", err: errors.New(`ent: missing required edge "ItemOrdem.produto"`)}
	}
	return nil
}

func (ioc *ItemOrdemCreate) sqlSave(ctx context.Context) (*ItemOrdem, error) {
	if err := ioc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ioc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ioc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ioc.mutation.id = &_node.ID
	ioc.mutation.done = true
	return _node, nil
}

func (ioc *ItemOrdemCreate) createSpec() (*ItemOrdem, *sqlgraph.CreateSpec) {
	var (
		_node = &ItemOrdem{config: ioc.config}
		_spec = sqlgraph.NewCreateSpec(itemordem.Table, sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt))
	)
	if value, ok := ioc.mutation.Quantidade(); ok {
		_spec.SetField(itemordem.FieldQuantidade, field.TypeInt, value)
		_node.Quantidade = value
	}
	if value, ok := ioc.mutation.PrecoUnitario(); ok {
		_spec.SetField(itemordem.FieldPrecoUnitario, field.TypeFloat64, value)
		_node.PrecoUnitario = value
	}
	if value, ok := ioc.mutation.PrecoTotal(); ok {
		_spec.SetField(itemordem.FieldPrecoTotal, field.TypeFloat64, value)
		_node.PrecoTotal = value
	}
	if nodes := ioc.mutation.OrdemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemordem.OrdemTable,
			Columns: []string{itemordem.OrdemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrdemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ioc.mutation.ProdutoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemordem.ProdutoTable,
			Columns: []string{itemordem.ProdutoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProdutoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ioc.mutation.EnvioIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemordem.EnvioTable,
			Columns: []string{itemordem.EnvioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(envio.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.envio_itens = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ItemOrdemCreateBulk is the builder for creating many ItemOrdem entities in bulk.
type ItemOrdemCreateBulk struct {
	config
	err      error
	builders []*ItemOrdemCreate
}

// Save creates the ItemOrdem entities in the database.
func (iocb *ItemOrdemCreateBulk) Save(ctx context.Context) ([]*ItemOrdem, error) {
	if iocb.err != nil {
		return nil, iocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iocb.builders))
	nodes := make([]*ItemOrdem, len(iocb.builders))
	mutators := make([]Mutator, len(iocb.builders))
	for i := range iocb.builders {
		func(i int, root context.Context) {
			builder := iocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemOrdemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iocb *ItemOrdemCreateBulk) SaveX(ctx context.Context) []*ItemOrdem {
	v, err := iocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iocb *ItemOrdemCreateBulk) Exec(ctx context.Context) error {
	_, err := iocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iocb *ItemOrdemCreateBulk) ExecX(ctx context.Context) {
	if err := iocb.Exec(ctx); err != nil {
		panic(err)
	}
}
