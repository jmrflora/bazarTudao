// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jmrflora/bazarTudao/ent/itemordem"
	"github.com/jmrflora/bazarTudao/ent/ordem"
	"github.com/jmrflora/bazarTudao/ent/produto"
)

// ItemOrdem is the model entity for the ItemOrdem schema.
type ItemOrdem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantidade holds the value of the "quantidade" field.
	Quantidade int `json:"quantidade,omitempty"`
	// Preco holds the value of the "preco" field.
	Preco float64 `json:"preco,omitempty"`
	// OrdemID holds the value of the "ordem_id" field.
	OrdemID int `json:"ordem_id,omitempty"`
	// ProdutoID holds the value of the "produto_id" field.
	ProdutoID int `json:"produto_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemOrdemQuery when eager-loading is set.
	Edges        ItemOrdemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ItemOrdemEdges holds the relations/edges for other nodes in the graph.
type ItemOrdemEdges struct {
	// Ordem holds the value of the ordem edge.
	Ordem *Ordem `json:"ordem,omitempty"`
	// Produto holds the value of the produto edge.
	Produto *Produto `json:"produto,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrdemOrErr returns the Ordem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemOrdemEdges) OrdemOrErr() (*Ordem, error) {
	if e.Ordem != nil {
		return e.Ordem, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: ordem.Label}
	}
	return nil, &NotLoadedError{edge: "ordem"}
}

// ProdutoOrErr returns the Produto value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemOrdemEdges) ProdutoOrErr() (*Produto, error) {
	if e.Produto != nil {
		return e.Produto, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: produto.Label}
	}
	return nil, &NotLoadedError{edge: "produto"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ItemOrdem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case itemordem.FieldPreco:
			values[i] = new(sql.NullFloat64)
		case itemordem.FieldID, itemordem.FieldQuantidade, itemordem.FieldOrdemID, itemordem.FieldProdutoID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ItemOrdem fields.
func (io *ItemOrdem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case itemordem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			io.ID = int(value.Int64)
		case itemordem.FieldQuantidade:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantidade", values[i])
			} else if value.Valid {
				io.Quantidade = int(value.Int64)
			}
		case itemordem.FieldPreco:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field preco", values[i])
			} else if value.Valid {
				io.Preco = value.Float64
			}
		case itemordem.FieldOrdemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ordem_id", values[i])
			} else if value.Valid {
				io.OrdemID = int(value.Int64)
			}
		case itemordem.FieldProdutoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field produto_id", values[i])
			} else if value.Valid {
				io.ProdutoID = int(value.Int64)
			}
		default:
			io.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ItemOrdem.
// This includes values selected through modifiers, order, etc.
func (io *ItemOrdem) Value(name string) (ent.Value, error) {
	return io.selectValues.Get(name)
}

// QueryOrdem queries the "ordem" edge of the ItemOrdem entity.
func (io *ItemOrdem) QueryOrdem() *OrdemQuery {
	return NewItemOrdemClient(io.config).QueryOrdem(io)
}

// QueryProduto queries the "produto" edge of the ItemOrdem entity.
func (io *ItemOrdem) QueryProduto() *ProdutoQuery {
	return NewItemOrdemClient(io.config).QueryProduto(io)
}

// Update returns a builder for updating this ItemOrdem.
// Note that you need to call ItemOrdem.Unwrap() before calling this method if this ItemOrdem
// was returned from a transaction, and the transaction was committed or rolled back.
func (io *ItemOrdem) Update() *ItemOrdemUpdateOne {
	return NewItemOrdemClient(io.config).UpdateOne(io)
}

// Unwrap unwraps the ItemOrdem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (io *ItemOrdem) Unwrap() *ItemOrdem {
	_tx, ok := io.config.driver.(*txDriver)
	if !ok {
		panic("ent: ItemOrdem is not a transactional entity")
	}
	io.config.driver = _tx.drv
	return io
}

// String implements the fmt.Stringer.
func (io *ItemOrdem) String() string {
	var builder strings.Builder
	builder.WriteString("ItemOrdem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", io.ID))
	builder.WriteString("quantidade=")
	builder.WriteString(fmt.Sprintf("%v", io.Quantidade))
	builder.WriteString(", ")
	builder.WriteString("preco=")
	builder.WriteString(fmt.Sprintf("%v", io.Preco))
	builder.WriteString(", ")
	builder.WriteString("ordem_id=")
	builder.WriteString(fmt.Sprintf("%v", io.OrdemID))
	builder.WriteString(", ")
	builder.WriteString("produto_id=")
	builder.WriteString(fmt.Sprintf("%v", io.ProdutoID))
	builder.WriteByte(')')
	return builder.String()
}

// ItemOrdems is a parsable slice of ItemOrdem.
type ItemOrdems []*ItemOrdem
