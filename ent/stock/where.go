// Code generated by ent, DO NOT EDIT.

package stock

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jmrflora/bazarTudao/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldID, id))
}

// DataMovimento applies equality check predicate on the "data_movimento" field. It's identical to DataMovimentoEQ.
func DataMovimento(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldDataMovimento, v))
}

// Quantidade applies equality check predicate on the "quantidade" field. It's identical to QuantidadeEQ.
func Quantidade(v int) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldQuantidade, v))
}

// DataMovimentoEQ applies the EQ predicate on the "data_movimento" field.
func DataMovimentoEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldDataMovimento, v))
}

// DataMovimentoNEQ applies the NEQ predicate on the "data_movimento" field.
func DataMovimentoNEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldDataMovimento, v))
}

// DataMovimentoIn applies the In predicate on the "data_movimento" field.
func DataMovimentoIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldDataMovimento, vs...))
}

// DataMovimentoNotIn applies the NotIn predicate on the "data_movimento" field.
func DataMovimentoNotIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldDataMovimento, vs...))
}

// DataMovimentoGT applies the GT predicate on the "data_movimento" field.
func DataMovimentoGT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldDataMovimento, v))
}

// DataMovimentoGTE applies the GTE predicate on the "data_movimento" field.
func DataMovimentoGTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldDataMovimento, v))
}

// DataMovimentoLT applies the LT predicate on the "data_movimento" field.
func DataMovimentoLT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldDataMovimento, v))
}

// DataMovimentoLTE applies the LTE predicate on the "data_movimento" field.
func DataMovimentoLTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldDataMovimento, v))
}

// QuantidadeEQ applies the EQ predicate on the "quantidade" field.
func QuantidadeEQ(v int) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldQuantidade, v))
}

// QuantidadeNEQ applies the NEQ predicate on the "quantidade" field.
func QuantidadeNEQ(v int) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldQuantidade, v))
}

// QuantidadeIn applies the In predicate on the "quantidade" field.
func QuantidadeIn(vs ...int) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldQuantidade, vs...))
}

// QuantidadeNotIn applies the NotIn predicate on the "quantidade" field.
func QuantidadeNotIn(vs ...int) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldQuantidade, vs...))
}

// QuantidadeGT applies the GT predicate on the "quantidade" field.
func QuantidadeGT(v int) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldQuantidade, v))
}

// QuantidadeGTE applies the GTE predicate on the "quantidade" field.
func QuantidadeGTE(v int) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldQuantidade, v))
}

// QuantidadeLT applies the LT predicate on the "quantidade" field.
func QuantidadeLT(v int) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldQuantidade, v))
}

// QuantidadeLTE applies the LTE predicate on the "quantidade" field.
func QuantidadeLTE(v int) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldQuantidade, v))
}

// HasProdutos applies the HasEdge predicate on the "produtos" edge.
func HasProdutos() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProdutosTable, ProdutosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProdutosWith applies the HasEdge predicate on the "produtos" edge with a given conditions (other predicates).
func HasProdutosWith(preds ...predicate.Produto) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newProdutosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stock) predicate.Stock {
	return predicate.Stock(sql.NotPredicates(p))
}
