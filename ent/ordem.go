// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jmrflora/bazarTudao/ent/cliente"
	"github.com/jmrflora/bazarTudao/ent/ordem"
)

// Ordem is the model entity for the Ordem schema.
type Ordem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DataOrdem holds the value of the "data_ordem" field.
	DataOrdem time.Time `json:"data_ordem,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrdemQuery when eager-loading is set.
	Edges          OrdemEdges `json:"edges"`
	cliente_ordens *int
	selectValues   sql.SelectValues
}

// OrdemEdges holds the relations/edges for other nodes in the graph.
type OrdemEdges struct {
	// Produtos holds the value of the produtos edge.
	Produtos []*Produto `json:"produtos,omitempty"`
	// Clientes holds the value of the clientes edge.
	Clientes *Cliente `json:"clientes,omitempty"`
	// Items holds the value of the items edge.
	Items []*ItemOrdem `json:"items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProdutosOrErr returns the Produtos value or an error if the edge
// was not loaded in eager-loading.
func (e OrdemEdges) ProdutosOrErr() ([]*Produto, error) {
	if e.loadedTypes[0] {
		return e.Produtos, nil
	}
	return nil, &NotLoadedError{edge: "produtos"}
}

// ClientesOrErr returns the Clientes value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrdemEdges) ClientesOrErr() (*Cliente, error) {
	if e.Clientes != nil {
		return e.Clientes, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: cliente.Label}
	}
	return nil, &NotLoadedError{edge: "clientes"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e OrdemEdges) ItemsOrErr() ([]*ItemOrdem, error) {
	if e.loadedTypes[2] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ordem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ordem.FieldID:
			values[i] = new(sql.NullInt64)
		case ordem.FieldDataOrdem:
			values[i] = new(sql.NullTime)
		case ordem.ForeignKeys[0]: // cliente_ordens
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ordem fields.
func (o *Ordem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ordem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case ordem.FieldDataOrdem:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field data_ordem", values[i])
			} else if value.Valid {
				o.DataOrdem = value.Time
			}
		case ordem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field cliente_ordens", value)
			} else if value.Valid {
				o.cliente_ordens = new(int)
				*o.cliente_ordens = int(value.Int64)
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ordem.
// This includes values selected through modifiers, order, etc.
func (o *Ordem) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryProdutos queries the "produtos" edge of the Ordem entity.
func (o *Ordem) QueryProdutos() *ProdutoQuery {
	return NewOrdemClient(o.config).QueryProdutos(o)
}

// QueryClientes queries the "clientes" edge of the Ordem entity.
func (o *Ordem) QueryClientes() *ClienteQuery {
	return NewOrdemClient(o.config).QueryClientes(o)
}

// QueryItems queries the "items" edge of the Ordem entity.
func (o *Ordem) QueryItems() *ItemOrdemQuery {
	return NewOrdemClient(o.config).QueryItems(o)
}

// Update returns a builder for updating this Ordem.
// Note that you need to call Ordem.Unwrap() before calling this method if this Ordem
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Ordem) Update() *OrdemUpdateOne {
	return NewOrdemClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Ordem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Ordem) Unwrap() *Ordem {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ordem is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Ordem) String() string {
	var builder strings.Builder
	builder.WriteString("Ordem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("data_ordem=")
	builder.WriteString(o.DataOrdem.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Ordems is a parsable slice of Ordem.
type Ordems []*Ordem
