// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jmrflora/bazarTudao/ent/envio"
	"github.com/jmrflora/bazarTudao/ent/itemordem"
	"github.com/jmrflora/bazarTudao/ent/predicate"
)

// EnvioUpdate is the builder for updating Envio entities.
type EnvioUpdate struct {
	config
	hooks    []Hook
	mutation *EnvioMutation
}

// Where appends a list predicates to the EnvioUpdate builder.
func (eu *EnvioUpdate) Where(ps ...predicate.Envio) *EnvioUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetData sets the "data" field.
func (eu *EnvioUpdate) SetData(t time.Time) *EnvioUpdate {
	eu.mutation.SetData(t)
	return eu
}

// SetNillableData sets the "data" field if the given value is not nil.
func (eu *EnvioUpdate) SetNillableData(t *time.Time) *EnvioUpdate {
	if t != nil {
		eu.SetData(*t)
	}
	return eu
}

// AddItenIDs adds the "itens" edge to the ItemOrdem entity by IDs.
func (eu *EnvioUpdate) AddItenIDs(ids ...int) *EnvioUpdate {
	eu.mutation.AddItenIDs(ids...)
	return eu
}

// AddItens adds the "itens" edges to the ItemOrdem entity.
func (eu *EnvioUpdate) AddItens(i ...*ItemOrdem) *EnvioUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddItenIDs(ids...)
}

// Mutation returns the EnvioMutation object of the builder.
func (eu *EnvioUpdate) Mutation() *EnvioMutation {
	return eu.mutation
}

// ClearItens clears all "itens" edges to the ItemOrdem entity.
func (eu *EnvioUpdate) ClearItens() *EnvioUpdate {
	eu.mutation.ClearItens()
	return eu
}

// RemoveItenIDs removes the "itens" edge to ItemOrdem entities by IDs.
func (eu *EnvioUpdate) RemoveItenIDs(ids ...int) *EnvioUpdate {
	eu.mutation.RemoveItenIDs(ids...)
	return eu
}

// RemoveItens removes "itens" edges to ItemOrdem entities.
func (eu *EnvioUpdate) RemoveItens(i ...*ItemOrdem) *EnvioUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveItenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnvioUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnvioUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnvioUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnvioUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EnvioUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(envio.Table, envio.Columns, sqlgraph.NewFieldSpec(envio.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Data(); ok {
		_spec.SetField(envio.FieldData, field.TypeTime, value)
	}
	if eu.mutation.ItensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   envio.ItensTable,
			Columns: []string{envio.ItensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedItensIDs(); len(nodes) > 0 && !eu.mutation.ItensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   envio.ItensTable,
			Columns: []string{envio.ItensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ItensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   envio.ItensTable,
			Columns: []string{envio.ItensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{envio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EnvioUpdateOne is the builder for updating a single Envio entity.
type EnvioUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnvioMutation
}

// SetData sets the "data" field.
func (euo *EnvioUpdateOne) SetData(t time.Time) *EnvioUpdateOne {
	euo.mutation.SetData(t)
	return euo
}

// SetNillableData sets the "data" field if the given value is not nil.
func (euo *EnvioUpdateOne) SetNillableData(t *time.Time) *EnvioUpdateOne {
	if t != nil {
		euo.SetData(*t)
	}
	return euo
}

// AddItenIDs adds the "itens" edge to the ItemOrdem entity by IDs.
func (euo *EnvioUpdateOne) AddItenIDs(ids ...int) *EnvioUpdateOne {
	euo.mutation.AddItenIDs(ids...)
	return euo
}

// AddItens adds the "itens" edges to the ItemOrdem entity.
func (euo *EnvioUpdateOne) AddItens(i ...*ItemOrdem) *EnvioUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddItenIDs(ids...)
}

// Mutation returns the EnvioMutation object of the builder.
func (euo *EnvioUpdateOne) Mutation() *EnvioMutation {
	return euo.mutation
}

// ClearItens clears all "itens" edges to the ItemOrdem entity.
func (euo *EnvioUpdateOne) ClearItens() *EnvioUpdateOne {
	euo.mutation.ClearItens()
	return euo
}

// RemoveItenIDs removes the "itens" edge to ItemOrdem entities by IDs.
func (euo *EnvioUpdateOne) RemoveItenIDs(ids ...int) *EnvioUpdateOne {
	euo.mutation.RemoveItenIDs(ids...)
	return euo
}

// RemoveItens removes "itens" edges to ItemOrdem entities.
func (euo *EnvioUpdateOne) RemoveItens(i ...*ItemOrdem) *EnvioUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveItenIDs(ids...)
}

// Where appends a list predicates to the EnvioUpdate builder.
func (euo *EnvioUpdateOne) Where(ps ...predicate.Envio) *EnvioUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EnvioUpdateOne) Select(field string, fields ...string) *EnvioUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Envio entity.
func (euo *EnvioUpdateOne) Save(ctx context.Context) (*Envio, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnvioUpdateOne) SaveX(ctx context.Context) *Envio {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnvioUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnvioUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EnvioUpdateOne) sqlSave(ctx context.Context) (_node *Envio, err error) {
	_spec := sqlgraph.NewUpdateSpec(envio.Table, envio.Columns, sqlgraph.NewFieldSpec(envio.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Envio.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, envio.FieldID)
		for _, f := range fields {
			if !envio.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != envio.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Data(); ok {
		_spec.SetField(envio.FieldData, field.TypeTime, value)
	}
	if euo.mutation.ItensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   envio.ItensTable,
			Columns: []string{envio.ItensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedItensIDs(); len(nodes) > 0 && !euo.mutation.ItensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   envio.ItensTable,
			Columns: []string{envio.ItensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ItensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   envio.ItensTable,
			Columns: []string{envio.ItensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Envio{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{envio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
