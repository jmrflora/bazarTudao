// Code generated by ent, DO NOT EDIT.

package envio

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the envio type in the database.
	Label = "envio"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// EdgeItens holds the string denoting the itens edge name in mutations.
	EdgeItens = "itens"
	// Table holds the table name of the envio in the database.
	Table = "envios"
	// ItensTable is the table that holds the itens relation/edge.
	ItensTable = "item_ordems"
	// ItensInverseTable is the table name for the ItemOrdem entity.
	// It exists in this package in order to avoid circular dependency with the "itemordem" package.
	ItensInverseTable = "item_ordems"
	// ItensColumn is the table column denoting the itens relation/edge.
	ItensColumn = "envio_itens"
)

// Columns holds all SQL columns for envio fields.
var Columns = []string{
	FieldID,
	FieldData,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultData holds the default value on creation for the "data" field.
	DefaultData func() time.Time
)

// OrderOption defines the ordering options for the Envio queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByData orders the results by the data field.
func ByData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldData, opts...).ToFunc()
}

// ByItensCount orders the results by itens count.
func ByItensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItensStep(), opts...)
	}
}

// ByItens orders the results by itens terms.
func ByItens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newItensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ItensTable, ItensColumn),
	)
}
