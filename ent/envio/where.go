// Code generated by ent, DO NOT EDIT.

package envio

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jmrflora/bazarTudao/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Envio {
	return predicate.Envio(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Envio {
	return predicate.Envio(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Envio {
	return predicate.Envio(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Envio {
	return predicate.Envio(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Envio {
	return predicate.Envio(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Envio {
	return predicate.Envio(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Envio {
	return predicate.Envio(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Envio {
	return predicate.Envio(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Envio {
	return predicate.Envio(sql.FieldLTE(FieldID, id))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v time.Time) predicate.Envio {
	return predicate.Envio(sql.FieldEQ(FieldData, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v time.Time) predicate.Envio {
	return predicate.Envio(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v time.Time) predicate.Envio {
	return predicate.Envio(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...time.Time) predicate.Envio {
	return predicate.Envio(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...time.Time) predicate.Envio {
	return predicate.Envio(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v time.Time) predicate.Envio {
	return predicate.Envio(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v time.Time) predicate.Envio {
	return predicate.Envio(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v time.Time) predicate.Envio {
	return predicate.Envio(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v time.Time) predicate.Envio {
	return predicate.Envio(sql.FieldLTE(FieldData, v))
}

// HasItens applies the HasEdge predicate on the "itens" edge.
func HasItens() predicate.Envio {
	return predicate.Envio(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItensTable, ItensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItensWith applies the HasEdge predicate on the "itens" edge with a given conditions (other predicates).
func HasItensWith(preds ...predicate.ItemOrdem) predicate.Envio {
	return predicate.Envio(func(s *sql.Selector) {
		step := newItensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Envio) predicate.Envio {
	return predicate.Envio(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Envio) predicate.Envio {
	return predicate.Envio(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Envio) predicate.Envio {
	return predicate.Envio(sql.NotPredicates(p))
}
