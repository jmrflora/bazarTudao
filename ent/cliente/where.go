// Code generated by ent, DO NOT EDIT.

package cliente

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jmrflora/bazarTudao/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Cliente {
	return predicate.Cliente(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Cliente {
	return predicate.Cliente(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Cliente {
	return predicate.Cliente(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Cliente {
	return predicate.Cliente(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Cliente {
	return predicate.Cliente(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Cliente {
	return predicate.Cliente(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Cliente {
	return predicate.Cliente(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Cliente {
	return predicate.Cliente(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Cliente {
	return predicate.Cliente(sql.FieldLTE(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldEQ(FieldEmail, v))
}

// Nome applies equality check predicate on the "nome" field. It's identical to NomeEQ.
func Nome(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldEQ(FieldNome, v))
}

// Cpf applies equality check predicate on the "cpf" field. It's identical to CpfEQ.
func Cpf(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldEQ(FieldCpf, v))
}

// Telefone applies equality check predicate on the "telefone" field. It's identical to TelefoneEQ.
func Telefone(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldEQ(FieldTelefone, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Cliente {
	return predicate.Cliente(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Cliente {
	return predicate.Cliente(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldContainsFold(FieldEmail, v))
}

// NomeEQ applies the EQ predicate on the "nome" field.
func NomeEQ(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldEQ(FieldNome, v))
}

// NomeNEQ applies the NEQ predicate on the "nome" field.
func NomeNEQ(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldNEQ(FieldNome, v))
}

// NomeIn applies the In predicate on the "nome" field.
func NomeIn(vs ...string) predicate.Cliente {
	return predicate.Cliente(sql.FieldIn(FieldNome, vs...))
}

// NomeNotIn applies the NotIn predicate on the "nome" field.
func NomeNotIn(vs ...string) predicate.Cliente {
	return predicate.Cliente(sql.FieldNotIn(FieldNome, vs...))
}

// NomeGT applies the GT predicate on the "nome" field.
func NomeGT(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldGT(FieldNome, v))
}

// NomeGTE applies the GTE predicate on the "nome" field.
func NomeGTE(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldGTE(FieldNome, v))
}

// NomeLT applies the LT predicate on the "nome" field.
func NomeLT(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldLT(FieldNome, v))
}

// NomeLTE applies the LTE predicate on the "nome" field.
func NomeLTE(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldLTE(FieldNome, v))
}

// NomeContains applies the Contains predicate on the "nome" field.
func NomeContains(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldContains(FieldNome, v))
}

// NomeHasPrefix applies the HasPrefix predicate on the "nome" field.
func NomeHasPrefix(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldHasPrefix(FieldNome, v))
}

// NomeHasSuffix applies the HasSuffix predicate on the "nome" field.
func NomeHasSuffix(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldHasSuffix(FieldNome, v))
}

// NomeEqualFold applies the EqualFold predicate on the "nome" field.
func NomeEqualFold(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldEqualFold(FieldNome, v))
}

// NomeContainsFold applies the ContainsFold predicate on the "nome" field.
func NomeContainsFold(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldContainsFold(FieldNome, v))
}

// CpfEQ applies the EQ predicate on the "cpf" field.
func CpfEQ(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldEQ(FieldCpf, v))
}

// CpfNEQ applies the NEQ predicate on the "cpf" field.
func CpfNEQ(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldNEQ(FieldCpf, v))
}

// CpfIn applies the In predicate on the "cpf" field.
func CpfIn(vs ...string) predicate.Cliente {
	return predicate.Cliente(sql.FieldIn(FieldCpf, vs...))
}

// CpfNotIn applies the NotIn predicate on the "cpf" field.
func CpfNotIn(vs ...string) predicate.Cliente {
	return predicate.Cliente(sql.FieldNotIn(FieldCpf, vs...))
}

// CpfGT applies the GT predicate on the "cpf" field.
func CpfGT(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldGT(FieldCpf, v))
}

// CpfGTE applies the GTE predicate on the "cpf" field.
func CpfGTE(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldGTE(FieldCpf, v))
}

// CpfLT applies the LT predicate on the "cpf" field.
func CpfLT(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldLT(FieldCpf, v))
}

// CpfLTE applies the LTE predicate on the "cpf" field.
func CpfLTE(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldLTE(FieldCpf, v))
}

// CpfContains applies the Contains predicate on the "cpf" field.
func CpfContains(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldContains(FieldCpf, v))
}

// CpfHasPrefix applies the HasPrefix predicate on the "cpf" field.
func CpfHasPrefix(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldHasPrefix(FieldCpf, v))
}

// CpfHasSuffix applies the HasSuffix predicate on the "cpf" field.
func CpfHasSuffix(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldHasSuffix(FieldCpf, v))
}

// CpfEqualFold applies the EqualFold predicate on the "cpf" field.
func CpfEqualFold(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldEqualFold(FieldCpf, v))
}

// CpfContainsFold applies the ContainsFold predicate on the "cpf" field.
func CpfContainsFold(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldContainsFold(FieldCpf, v))
}

// TelefoneEQ applies the EQ predicate on the "telefone" field.
func TelefoneEQ(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldEQ(FieldTelefone, v))
}

// TelefoneNEQ applies the NEQ predicate on the "telefone" field.
func TelefoneNEQ(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldNEQ(FieldTelefone, v))
}

// TelefoneIn applies the In predicate on the "telefone" field.
func TelefoneIn(vs ...string) predicate.Cliente {
	return predicate.Cliente(sql.FieldIn(FieldTelefone, vs...))
}

// TelefoneNotIn applies the NotIn predicate on the "telefone" field.
func TelefoneNotIn(vs ...string) predicate.Cliente {
	return predicate.Cliente(sql.FieldNotIn(FieldTelefone, vs...))
}

// TelefoneGT applies the GT predicate on the "telefone" field.
func TelefoneGT(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldGT(FieldTelefone, v))
}

// TelefoneGTE applies the GTE predicate on the "telefone" field.
func TelefoneGTE(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldGTE(FieldTelefone, v))
}

// TelefoneLT applies the LT predicate on the "telefone" field.
func TelefoneLT(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldLT(FieldTelefone, v))
}

// TelefoneLTE applies the LTE predicate on the "telefone" field.
func TelefoneLTE(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldLTE(FieldTelefone, v))
}

// TelefoneContains applies the Contains predicate on the "telefone" field.
func TelefoneContains(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldContains(FieldTelefone, v))
}

// TelefoneHasPrefix applies the HasPrefix predicate on the "telefone" field.
func TelefoneHasPrefix(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldHasPrefix(FieldTelefone, v))
}

// TelefoneHasSuffix applies the HasSuffix predicate on the "telefone" field.
func TelefoneHasSuffix(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldHasSuffix(FieldTelefone, v))
}

// TelefoneEqualFold applies the EqualFold predicate on the "telefone" field.
func TelefoneEqualFold(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldEqualFold(FieldTelefone, v))
}

// TelefoneContainsFold applies the ContainsFold predicate on the "telefone" field.
func TelefoneContainsFold(v string) predicate.Cliente {
	return predicate.Cliente(sql.FieldContainsFold(FieldTelefone, v))
}

// HasOrdens applies the HasEdge predicate on the "ordens" edge.
func HasOrdens() predicate.Cliente {
	return predicate.Cliente(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdensTable, OrdensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdensWith applies the HasEdge predicate on the "ordens" edge with a given conditions (other predicates).
func HasOrdensWith(preds ...predicate.Ordem) predicate.Cliente {
	return predicate.Cliente(func(s *sql.Selector) {
		step := newOrdensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cliente) predicate.Cliente {
	return predicate.Cliente(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cliente) predicate.Cliente {
	return predicate.Cliente(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cliente) predicate.Cliente {
	return predicate.Cliente(sql.NotPredicates(p))
}
