// Code generated by ent, DO NOT EDIT.

package cliente

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cliente type in the database.
	Label = "cliente"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldNome holds the string denoting the nome field in the database.
	FieldNome = "nome"
	// FieldCpf holds the string denoting the cpf field in the database.
	FieldCpf = "cpf"
	// FieldTelefone holds the string denoting the telefone field in the database.
	FieldTelefone = "telefone"
	// FieldEnderecoEntrega holds the string denoting the endereco_entrega field in the database.
	FieldEnderecoEntrega = "endereco_entrega"
	// EdgeOrdens holds the string denoting the ordens edge name in mutations.
	EdgeOrdens = "ordens"
	// Table holds the table name of the cliente in the database.
	Table = "clientes"
	// OrdensTable is the table that holds the ordens relation/edge.
	OrdensTable = "ordems"
	// OrdensInverseTable is the table name for the Ordem entity.
	// It exists in this package in order to avoid circular dependency with the "ordem" package.
	OrdensInverseTable = "ordems"
	// OrdensColumn is the table column denoting the ordens relation/edge.
	OrdensColumn = "cliente_ordens"
)

// Columns holds all SQL columns for cliente fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldNome,
	FieldCpf,
	FieldTelefone,
	FieldEnderecoEntrega,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Cliente queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByNome orders the results by the nome field.
func ByNome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNome, opts...).ToFunc()
}

// ByCpf orders the results by the cpf field.
func ByCpf(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCpf, opts...).ToFunc()
}

// ByTelefone orders the results by the telefone field.
func ByTelefone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelefone, opts...).ToFunc()
}

// ByEnderecoEntrega orders the results by the endereco_entrega field.
func ByEnderecoEntrega(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnderecoEntrega, opts...).ToFunc()
}

// ByOrdensCount orders the results by ordens count.
func ByOrdensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrdensStep(), opts...)
	}
}

// ByOrdens orders the results by ordens terms.
func ByOrdens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrdensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrdensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrdensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrdensTable, OrdensColumn),
	)
}
