// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jmrflora/bazarTudao/ent/cliente"
	"github.com/jmrflora/bazarTudao/ent/itemordem"
	"github.com/jmrflora/bazarTudao/ent/ordem"
	"github.com/jmrflora/bazarTudao/ent/predicate"
	"github.com/jmrflora/bazarTudao/ent/produto"
)

// OrdemUpdate is the builder for updating Ordem entities.
type OrdemUpdate struct {
	config
	hooks    []Hook
	mutation *OrdemMutation
}

// Where appends a list predicates to the OrdemUpdate builder.
func (ou *OrdemUpdate) Where(ps ...predicate.Ordem) *OrdemUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetDataOrdem sets the "data_ordem" field.
func (ou *OrdemUpdate) SetDataOrdem(t time.Time) *OrdemUpdate {
	ou.mutation.SetDataOrdem(t)
	return ou
}

// SetNillableDataOrdem sets the "data_ordem" field if the given value is not nil.
func (ou *OrdemUpdate) SetNillableDataOrdem(t *time.Time) *OrdemUpdate {
	if t != nil {
		ou.SetDataOrdem(*t)
	}
	return ou
}

// AddProdutoIDs adds the "produtos" edge to the Produto entity by IDs.
func (ou *OrdemUpdate) AddProdutoIDs(ids ...int) *OrdemUpdate {
	ou.mutation.AddProdutoIDs(ids...)
	return ou
}

// AddProdutos adds the "produtos" edges to the Produto entity.
func (ou *OrdemUpdate) AddProdutos(p ...*Produto) *OrdemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddProdutoIDs(ids...)
}

// SetClientesID sets the "clientes" edge to the Cliente entity by ID.
func (ou *OrdemUpdate) SetClientesID(id int) *OrdemUpdate {
	ou.mutation.SetClientesID(id)
	return ou
}

// SetNillableClientesID sets the "clientes" edge to the Cliente entity by ID if the given value is not nil.
func (ou *OrdemUpdate) SetNillableClientesID(id *int) *OrdemUpdate {
	if id != nil {
		ou = ou.SetClientesID(*id)
	}
	return ou
}

// SetClientes sets the "clientes" edge to the Cliente entity.
func (ou *OrdemUpdate) SetClientes(c *Cliente) *OrdemUpdate {
	return ou.SetClientesID(c.ID)
}

// AddItemIDs adds the "items" edge to the ItemOrdem entity by IDs.
func (ou *OrdemUpdate) AddItemIDs(ids ...int) *OrdemUpdate {
	ou.mutation.AddItemIDs(ids...)
	return ou
}

// AddItems adds the "items" edges to the ItemOrdem entity.
func (ou *OrdemUpdate) AddItems(i ...*ItemOrdem) *OrdemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.AddItemIDs(ids...)
}

// Mutation returns the OrdemMutation object of the builder.
func (ou *OrdemUpdate) Mutation() *OrdemMutation {
	return ou.mutation
}

// ClearProdutos clears all "produtos" edges to the Produto entity.
func (ou *OrdemUpdate) ClearProdutos() *OrdemUpdate {
	ou.mutation.ClearProdutos()
	return ou
}

// RemoveProdutoIDs removes the "produtos" edge to Produto entities by IDs.
func (ou *OrdemUpdate) RemoveProdutoIDs(ids ...int) *OrdemUpdate {
	ou.mutation.RemoveProdutoIDs(ids...)
	return ou
}

// RemoveProdutos removes "produtos" edges to Produto entities.
func (ou *OrdemUpdate) RemoveProdutos(p ...*Produto) *OrdemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemoveProdutoIDs(ids...)
}

// ClearClientes clears the "clientes" edge to the Cliente entity.
func (ou *OrdemUpdate) ClearClientes() *OrdemUpdate {
	ou.mutation.ClearClientes()
	return ou
}

// ClearItems clears all "items" edges to the ItemOrdem entity.
func (ou *OrdemUpdate) ClearItems() *OrdemUpdate {
	ou.mutation.ClearItems()
	return ou
}

// RemoveItemIDs removes the "items" edge to ItemOrdem entities by IDs.
func (ou *OrdemUpdate) RemoveItemIDs(ids ...int) *OrdemUpdate {
	ou.mutation.RemoveItemIDs(ids...)
	return ou
}

// RemoveItems removes "items" edges to ItemOrdem entities.
func (ou *OrdemUpdate) RemoveItems(i ...*ItemOrdem) *OrdemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrdemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrdemUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrdemUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrdemUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OrdemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ordem.Table, ordem.Columns, sqlgraph.NewFieldSpec(ordem.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.DataOrdem(); ok {
		_spec.SetField(ordem.FieldDataOrdem, field.TypeTime, value)
	}
	if ou.mutation.ProdutosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ordem.ProdutosTable,
			Columns: ordem.ProdutosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedProdutosIDs(); len(nodes) > 0 && !ou.mutation.ProdutosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ordem.ProdutosTable,
			Columns: ordem.ProdutosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ProdutosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ordem.ProdutosTable,
			Columns: ordem.ProdutosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ClientesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordem.ClientesTable,
			Columns: []string{ordem.ClientesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cliente.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ClientesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordem.ClientesTable,
			Columns: []string{ordem.ClientesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cliente.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ordem.ItemsTable,
			Columns: []string{ordem.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ou.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ordem.ItemsTable,
			Columns: []string{ordem.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ordem.ItemsTable,
			Columns: []string{ordem.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrdemUpdateOne is the builder for updating a single Ordem entity.
type OrdemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrdemMutation
}

// SetDataOrdem sets the "data_ordem" field.
func (ouo *OrdemUpdateOne) SetDataOrdem(t time.Time) *OrdemUpdateOne {
	ouo.mutation.SetDataOrdem(t)
	return ouo
}

// SetNillableDataOrdem sets the "data_ordem" field if the given value is not nil.
func (ouo *OrdemUpdateOne) SetNillableDataOrdem(t *time.Time) *OrdemUpdateOne {
	if t != nil {
		ouo.SetDataOrdem(*t)
	}
	return ouo
}

// AddProdutoIDs adds the "produtos" edge to the Produto entity by IDs.
func (ouo *OrdemUpdateOne) AddProdutoIDs(ids ...int) *OrdemUpdateOne {
	ouo.mutation.AddProdutoIDs(ids...)
	return ouo
}

// AddProdutos adds the "produtos" edges to the Produto entity.
func (ouo *OrdemUpdateOne) AddProdutos(p ...*Produto) *OrdemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddProdutoIDs(ids...)
}

// SetClientesID sets the "clientes" edge to the Cliente entity by ID.
func (ouo *OrdemUpdateOne) SetClientesID(id int) *OrdemUpdateOne {
	ouo.mutation.SetClientesID(id)
	return ouo
}

// SetNillableClientesID sets the "clientes" edge to the Cliente entity by ID if the given value is not nil.
func (ouo *OrdemUpdateOne) SetNillableClientesID(id *int) *OrdemUpdateOne {
	if id != nil {
		ouo = ouo.SetClientesID(*id)
	}
	return ouo
}

// SetClientes sets the "clientes" edge to the Cliente entity.
func (ouo *OrdemUpdateOne) SetClientes(c *Cliente) *OrdemUpdateOne {
	return ouo.SetClientesID(c.ID)
}

// AddItemIDs adds the "items" edge to the ItemOrdem entity by IDs.
func (ouo *OrdemUpdateOne) AddItemIDs(ids ...int) *OrdemUpdateOne {
	ouo.mutation.AddItemIDs(ids...)
	return ouo
}

// AddItems adds the "items" edges to the ItemOrdem entity.
func (ouo *OrdemUpdateOne) AddItems(i ...*ItemOrdem) *OrdemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.AddItemIDs(ids...)
}

// Mutation returns the OrdemMutation object of the builder.
func (ouo *OrdemUpdateOne) Mutation() *OrdemMutation {
	return ouo.mutation
}

// ClearProdutos clears all "produtos" edges to the Produto entity.
func (ouo *OrdemUpdateOne) ClearProdutos() *OrdemUpdateOne {
	ouo.mutation.ClearProdutos()
	return ouo
}

// RemoveProdutoIDs removes the "produtos" edge to Produto entities by IDs.
func (ouo *OrdemUpdateOne) RemoveProdutoIDs(ids ...int) *OrdemUpdateOne {
	ouo.mutation.RemoveProdutoIDs(ids...)
	return ouo
}

// RemoveProdutos removes "produtos" edges to Produto entities.
func (ouo *OrdemUpdateOne) RemoveProdutos(p ...*Produto) *OrdemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemoveProdutoIDs(ids...)
}

// ClearClientes clears the "clientes" edge to the Cliente entity.
func (ouo *OrdemUpdateOne) ClearClientes() *OrdemUpdateOne {
	ouo.mutation.ClearClientes()
	return ouo
}

// ClearItems clears all "items" edges to the ItemOrdem entity.
func (ouo *OrdemUpdateOne) ClearItems() *OrdemUpdateOne {
	ouo.mutation.ClearItems()
	return ouo
}

// RemoveItemIDs removes the "items" edge to ItemOrdem entities by IDs.
func (ouo *OrdemUpdateOne) RemoveItemIDs(ids ...int) *OrdemUpdateOne {
	ouo.mutation.RemoveItemIDs(ids...)
	return ouo
}

// RemoveItems removes "items" edges to ItemOrdem entities.
func (ouo *OrdemUpdateOne) RemoveItems(i ...*ItemOrdem) *OrdemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.RemoveItemIDs(ids...)
}

// Where appends a list predicates to the OrdemUpdate builder.
func (ouo *OrdemUpdateOne) Where(ps ...predicate.Ordem) *OrdemUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrdemUpdateOne) Select(field string, fields ...string) *OrdemUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Ordem entity.
func (ouo *OrdemUpdateOne) Save(ctx context.Context) (*Ordem, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrdemUpdateOne) SaveX(ctx context.Context) *Ordem {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrdemUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrdemUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OrdemUpdateOne) sqlSave(ctx context.Context) (_node *Ordem, err error) {
	_spec := sqlgraph.NewUpdateSpec(ordem.Table, ordem.Columns, sqlgraph.NewFieldSpec(ordem.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ordem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordem.FieldID)
		for _, f := range fields {
			if !ordem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.DataOrdem(); ok {
		_spec.SetField(ordem.FieldDataOrdem, field.TypeTime, value)
	}
	if ouo.mutation.ProdutosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ordem.ProdutosTable,
			Columns: ordem.ProdutosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedProdutosIDs(); len(nodes) > 0 && !ouo.mutation.ProdutosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ordem.ProdutosTable,
			Columns: ordem.ProdutosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ProdutosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ordem.ProdutosTable,
			Columns: ordem.ProdutosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ClientesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordem.ClientesTable,
			Columns: []string{ordem.ClientesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cliente.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ClientesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordem.ClientesTable,
			Columns: []string{ordem.ClientesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cliente.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ordem.ItemsTable,
			Columns: []string{ordem.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ouo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ordem.ItemsTable,
			Columns: []string{ordem.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ordem.ItemsTable,
			Columns: []string{ordem.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ordem{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
