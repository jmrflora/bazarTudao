// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jmrflora/bazarTudao/ent/produto"
	"github.com/jmrflora/bazarTudao/ent/stock"
)

// Stock is the model entity for the Stock schema.
type Stock struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DataMovimento holds the value of the "data_movimento" field.
	DataMovimento time.Time `json:"data_movimento,omitempty"`
	// Quantidade holds the value of the "quantidade" field.
	Quantidade int `json:"quantidade,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StockQuery when eager-loading is set.
	Edges          StockEdges `json:"edges"`
	stock_produtos *int
	selectValues   sql.SelectValues
}

// StockEdges holds the relations/edges for other nodes in the graph.
type StockEdges struct {
	// Produtos holds the value of the produtos edge.
	Produtos *Produto `json:"produtos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProdutosOrErr returns the Produtos value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockEdges) ProdutosOrErr() (*Produto, error) {
	if e.Produtos != nil {
		return e.Produtos, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: produto.Label}
	}
	return nil, &NotLoadedError{edge: "produtos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stock) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stock.FieldID, stock.FieldQuantidade:
			values[i] = new(sql.NullInt64)
		case stock.FieldDataMovimento:
			values[i] = new(sql.NullTime)
		case stock.ForeignKeys[0]: // stock_produtos
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stock fields.
func (s *Stock) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case stock.FieldDataMovimento:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field data_movimento", values[i])
			} else if value.Valid {
				s.DataMovimento = value.Time
			}
		case stock.FieldQuantidade:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantidade", values[i])
			} else if value.Valid {
				s.Quantidade = int(value.Int64)
			}
		case stock.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field stock_produtos", value)
			} else if value.Valid {
				s.stock_produtos = new(int)
				*s.stock_produtos = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Stock.
// This includes values selected through modifiers, order, etc.
func (s *Stock) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryProdutos queries the "produtos" edge of the Stock entity.
func (s *Stock) QueryProdutos() *ProdutoQuery {
	return NewStockClient(s.config).QueryProdutos(s)
}

// Update returns a builder for updating this Stock.
// Note that you need to call Stock.Unwrap() before calling this method if this Stock
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stock) Update() *StockUpdateOne {
	return NewStockClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Stock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stock) Unwrap() *Stock {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stock is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stock) String() string {
	var builder strings.Builder
	builder.WriteString("Stock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("data_movimento=")
	builder.WriteString(s.DataMovimento.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("quantidade=")
	builder.WriteString(fmt.Sprintf("%v", s.Quantidade))
	builder.WriteByte(')')
	return builder.String()
}

// Stocks is a parsable slice of Stock.
type Stocks []*Stock
