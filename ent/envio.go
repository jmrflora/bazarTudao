// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jmrflora/bazarTudao/ent/envio"
)

// Envio is the model entity for the Envio schema.
type Envio struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Data holds the value of the "data" field.
	Data time.Time `json:"data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnvioQuery when eager-loading is set.
	Edges        EnvioEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EnvioEdges holds the relations/edges for other nodes in the graph.
type EnvioEdges struct {
	// Itens holds the value of the itens edge.
	Itens []*ItemOrdem `json:"itens,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ItensOrErr returns the Itens value or an error if the edge
// was not loaded in eager-loading.
func (e EnvioEdges) ItensOrErr() ([]*ItemOrdem, error) {
	if e.loadedTypes[0] {
		return e.Itens, nil
	}
	return nil, &NotLoadedError{edge: "itens"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Envio) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case envio.FieldID:
			values[i] = new(sql.NullInt64)
		case envio.FieldData:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Envio fields.
func (e *Envio) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case envio.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case envio.FieldData:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				e.Data = value.Time
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Envio.
// This includes values selected through modifiers, order, etc.
func (e *Envio) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryItens queries the "itens" edge of the Envio entity.
func (e *Envio) QueryItens() *ItemOrdemQuery {
	return NewEnvioClient(e.config).QueryItens(e)
}

// Update returns a builder for updating this Envio.
// Note that you need to call Envio.Unwrap() before calling this method if this Envio
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Envio) Update() *EnvioUpdateOne {
	return NewEnvioClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Envio entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Envio) Unwrap() *Envio {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Envio is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Envio) String() string {
	var builder strings.Builder
	builder.WriteString("Envio(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("data=")
	builder.WriteString(e.Data.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Envios is a parsable slice of Envio.
type Envios []*Envio
