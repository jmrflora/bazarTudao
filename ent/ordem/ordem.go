// Code generated by ent, DO NOT EDIT.

package ordem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ordem type in the database.
	Label = "ordem"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDataOrdem holds the string denoting the data_ordem field in the database.
	FieldDataOrdem = "data_ordem"
	// FieldCompleta holds the string denoting the completa field in the database.
	FieldCompleta = "completa"
	// EdgeProdutos holds the string denoting the produtos edge name in mutations.
	EdgeProdutos = "produtos"
	// EdgeClientes holds the string denoting the clientes edge name in mutations.
	EdgeClientes = "clientes"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// Table holds the table name of the ordem in the database.
	Table = "ordems"
	// ProdutosTable is the table that holds the produtos relation/edge. The primary key declared below.
	ProdutosTable = "item_ordems"
	// ProdutosInverseTable is the table name for the Produto entity.
	// It exists in this package in order to avoid circular dependency with the "produto" package.
	ProdutosInverseTable = "produtos"
	// ClientesTable is the table that holds the clientes relation/edge.
	ClientesTable = "ordems"
	// ClientesInverseTable is the table name for the Cliente entity.
	// It exists in this package in order to avoid circular dependency with the "cliente" package.
	ClientesInverseTable = "clientes"
	// ClientesColumn is the table column denoting the clientes relation/edge.
	ClientesColumn = "cliente_ordens"
	// ItemsTable is the table that holds the items relation/edge.
	ItemsTable = "item_ordems"
	// ItemsInverseTable is the table name for the ItemOrdem entity.
	// It exists in this package in order to avoid circular dependency with the "itemordem" package.
	ItemsInverseTable = "item_ordems"
	// ItemsColumn is the table column denoting the items relation/edge.
	ItemsColumn = "ordem_id"
)

// Columns holds all SQL columns for ordem fields.
var Columns = []string{
	FieldID,
	FieldDataOrdem,
	FieldCompleta,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ordems"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"cliente_ordens",
}

var (
	// ProdutosPrimaryKey and ProdutosColumn2 are the table columns denoting the
	// primary key for the produtos relation (M2M).
	ProdutosPrimaryKey = []string{"ordem_id", "produto_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDataOrdem holds the default value on creation for the "data_ordem" field.
	DefaultDataOrdem func() time.Time
	// DefaultCompleta holds the default value on creation for the "completa" field.
	DefaultCompleta bool
)

// OrderOption defines the ordering options for the Ordem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDataOrdem orders the results by the data_ordem field.
func ByDataOrdem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataOrdem, opts...).ToFunc()
}

// ByCompleta orders the results by the completa field.
func ByCompleta(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompleta, opts...).ToFunc()
}

// ByProdutosCount orders the results by produtos count.
func ByProdutosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProdutosStep(), opts...)
	}
}

// ByProdutos orders the results by produtos terms.
func ByProdutos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProdutosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClientesField orders the results by clientes field.
func ByClientesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClientesStep(), sql.OrderByField(field, opts...))
	}
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProdutosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProdutosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ProdutosTable, ProdutosPrimaryKey...),
	)
}
func newClientesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClientesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClientesTable, ClientesColumn),
	)
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ItemsTable, ItemsColumn),
	)
}
