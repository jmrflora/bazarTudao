// Code generated by ent, DO NOT EDIT.

package ordem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jmrflora/bazarTudao/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Ordem {
	return predicate.Ordem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Ordem {
	return predicate.Ordem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Ordem {
	return predicate.Ordem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Ordem {
	return predicate.Ordem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Ordem {
	return predicate.Ordem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Ordem {
	return predicate.Ordem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Ordem {
	return predicate.Ordem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Ordem {
	return predicate.Ordem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Ordem {
	return predicate.Ordem(sql.FieldLTE(FieldID, id))
}

// DataOrdem applies equality check predicate on the "data_ordem" field. It's identical to DataOrdemEQ.
func DataOrdem(v time.Time) predicate.Ordem {
	return predicate.Ordem(sql.FieldEQ(FieldDataOrdem, v))
}

// PrecoDaOrdem applies equality check predicate on the "preco_da_ordem" field. It's identical to PrecoDaOrdemEQ.
func PrecoDaOrdem(v float64) predicate.Ordem {
	return predicate.Ordem(sql.FieldEQ(FieldPrecoDaOrdem, v))
}

// DataOrdemEQ applies the EQ predicate on the "data_ordem" field.
func DataOrdemEQ(v time.Time) predicate.Ordem {
	return predicate.Ordem(sql.FieldEQ(FieldDataOrdem, v))
}

// DataOrdemNEQ applies the NEQ predicate on the "data_ordem" field.
func DataOrdemNEQ(v time.Time) predicate.Ordem {
	return predicate.Ordem(sql.FieldNEQ(FieldDataOrdem, v))
}

// DataOrdemIn applies the In predicate on the "data_ordem" field.
func DataOrdemIn(vs ...time.Time) predicate.Ordem {
	return predicate.Ordem(sql.FieldIn(FieldDataOrdem, vs...))
}

// DataOrdemNotIn applies the NotIn predicate on the "data_ordem" field.
func DataOrdemNotIn(vs ...time.Time) predicate.Ordem {
	return predicate.Ordem(sql.FieldNotIn(FieldDataOrdem, vs...))
}

// DataOrdemGT applies the GT predicate on the "data_ordem" field.
func DataOrdemGT(v time.Time) predicate.Ordem {
	return predicate.Ordem(sql.FieldGT(FieldDataOrdem, v))
}

// DataOrdemGTE applies the GTE predicate on the "data_ordem" field.
func DataOrdemGTE(v time.Time) predicate.Ordem {
	return predicate.Ordem(sql.FieldGTE(FieldDataOrdem, v))
}

// DataOrdemLT applies the LT predicate on the "data_ordem" field.
func DataOrdemLT(v time.Time) predicate.Ordem {
	return predicate.Ordem(sql.FieldLT(FieldDataOrdem, v))
}

// DataOrdemLTE applies the LTE predicate on the "data_ordem" field.
func DataOrdemLTE(v time.Time) predicate.Ordem {
	return predicate.Ordem(sql.FieldLTE(FieldDataOrdem, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Ordem {
	return predicate.Ordem(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Ordem {
	return predicate.Ordem(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Ordem {
	return predicate.Ordem(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Ordem {
	return predicate.Ordem(sql.FieldNotIn(FieldStatus, vs...))
}

// PrecoDaOrdemEQ applies the EQ predicate on the "preco_da_ordem" field.
func PrecoDaOrdemEQ(v float64) predicate.Ordem {
	return predicate.Ordem(sql.FieldEQ(FieldPrecoDaOrdem, v))
}

// PrecoDaOrdemNEQ applies the NEQ predicate on the "preco_da_ordem" field.
func PrecoDaOrdemNEQ(v float64) predicate.Ordem {
	return predicate.Ordem(sql.FieldNEQ(FieldPrecoDaOrdem, v))
}

// PrecoDaOrdemIn applies the In predicate on the "preco_da_ordem" field.
func PrecoDaOrdemIn(vs ...float64) predicate.Ordem {
	return predicate.Ordem(sql.FieldIn(FieldPrecoDaOrdem, vs...))
}

// PrecoDaOrdemNotIn applies the NotIn predicate on the "preco_da_ordem" field.
func PrecoDaOrdemNotIn(vs ...float64) predicate.Ordem {
	return predicate.Ordem(sql.FieldNotIn(FieldPrecoDaOrdem, vs...))
}

// PrecoDaOrdemGT applies the GT predicate on the "preco_da_ordem" field.
func PrecoDaOrdemGT(v float64) predicate.Ordem {
	return predicate.Ordem(sql.FieldGT(FieldPrecoDaOrdem, v))
}

// PrecoDaOrdemGTE applies the GTE predicate on the "preco_da_ordem" field.
func PrecoDaOrdemGTE(v float64) predicate.Ordem {
	return predicate.Ordem(sql.FieldGTE(FieldPrecoDaOrdem, v))
}

// PrecoDaOrdemLT applies the LT predicate on the "preco_da_ordem" field.
func PrecoDaOrdemLT(v float64) predicate.Ordem {
	return predicate.Ordem(sql.FieldLT(FieldPrecoDaOrdem, v))
}

// PrecoDaOrdemLTE applies the LTE predicate on the "preco_da_ordem" field.
func PrecoDaOrdemLTE(v float64) predicate.Ordem {
	return predicate.Ordem(sql.FieldLTE(FieldPrecoDaOrdem, v))
}

// HasProdutos applies the HasEdge predicate on the "produtos" edge.
func HasProdutos() predicate.Ordem {
	return predicate.Ordem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ProdutosTable, ProdutosPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProdutosWith applies the HasEdge predicate on the "produtos" edge with a given conditions (other predicates).
func HasProdutosWith(preds ...predicate.Produto) predicate.Ordem {
	return predicate.Ordem(func(s *sql.Selector) {
		step := newProdutosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCliente applies the HasEdge predicate on the "cliente" edge.
func HasCliente() predicate.Ordem {
	return predicate.Ordem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClienteTable, ClienteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClienteWith applies the HasEdge predicate on the "cliente" edge with a given conditions (other predicates).
func HasClienteWith(preds ...predicate.Cliente) predicate.Ordem {
	return predicate.Ordem(func(s *sql.Selector) {
		step := newClienteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.Ordem {
	return predicate.Ordem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.ItemOrdem) predicate.Ordem {
	return predicate.Ordem(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ordem) predicate.Ordem {
	return predicate.Ordem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ordem) predicate.Ordem {
	return predicate.Ordem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ordem) predicate.Ordem {
	return predicate.Ordem(sql.NotPredicates(p))
}
