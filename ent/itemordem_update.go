// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jmrflora/bazarTudao/ent/itemordem"
	"github.com/jmrflora/bazarTudao/ent/ordem"
	"github.com/jmrflora/bazarTudao/ent/predicate"
	"github.com/jmrflora/bazarTudao/ent/produto"
)

// ItemOrdemUpdate is the builder for updating ItemOrdem entities.
type ItemOrdemUpdate struct {
	config
	hooks    []Hook
	mutation *ItemOrdemMutation
}

// Where appends a list predicates to the ItemOrdemUpdate builder.
func (iou *ItemOrdemUpdate) Where(ps ...predicate.ItemOrdem) *ItemOrdemUpdate {
	iou.mutation.Where(ps...)
	return iou
}

// SetQuantidade sets the "quantidade" field.
func (iou *ItemOrdemUpdate) SetQuantidade(i int) *ItemOrdemUpdate {
	iou.mutation.ResetQuantidade()
	iou.mutation.SetQuantidade(i)
	return iou
}

// SetNillableQuantidade sets the "quantidade" field if the given value is not nil.
func (iou *ItemOrdemUpdate) SetNillableQuantidade(i *int) *ItemOrdemUpdate {
	if i != nil {
		iou.SetQuantidade(*i)
	}
	return iou
}

// AddQuantidade adds i to the "quantidade" field.
func (iou *ItemOrdemUpdate) AddQuantidade(i int) *ItemOrdemUpdate {
	iou.mutation.AddQuantidade(i)
	return iou
}

// SetPreco sets the "preco" field.
func (iou *ItemOrdemUpdate) SetPreco(f float64) *ItemOrdemUpdate {
	iou.mutation.ResetPreco()
	iou.mutation.SetPreco(f)
	return iou
}

// SetNillablePreco sets the "preco" field if the given value is not nil.
func (iou *ItemOrdemUpdate) SetNillablePreco(f *float64) *ItemOrdemUpdate {
	if f != nil {
		iou.SetPreco(*f)
	}
	return iou
}

// AddPreco adds f to the "preco" field.
func (iou *ItemOrdemUpdate) AddPreco(f float64) *ItemOrdemUpdate {
	iou.mutation.AddPreco(f)
	return iou
}

// SetOrdemID sets the "ordem_id" field.
func (iou *ItemOrdemUpdate) SetOrdemID(i int) *ItemOrdemUpdate {
	iou.mutation.SetOrdemID(i)
	return iou
}

// SetNillableOrdemID sets the "ordem_id" field if the given value is not nil.
func (iou *ItemOrdemUpdate) SetNillableOrdemID(i *int) *ItemOrdemUpdate {
	if i != nil {
		iou.SetOrdemID(*i)
	}
	return iou
}

// SetProdutoID sets the "produto_id" field.
func (iou *ItemOrdemUpdate) SetProdutoID(i int) *ItemOrdemUpdate {
	iou.mutation.SetProdutoID(i)
	return iou
}

// SetNillableProdutoID sets the "produto_id" field if the given value is not nil.
func (iou *ItemOrdemUpdate) SetNillableProdutoID(i *int) *ItemOrdemUpdate {
	if i != nil {
		iou.SetProdutoID(*i)
	}
	return iou
}

// SetOrdem sets the "ordem" edge to the Ordem entity.
func (iou *ItemOrdemUpdate) SetOrdem(o *Ordem) *ItemOrdemUpdate {
	return iou.SetOrdemID(o.ID)
}

// SetProduto sets the "produto" edge to the Produto entity.
func (iou *ItemOrdemUpdate) SetProduto(p *Produto) *ItemOrdemUpdate {
	return iou.SetProdutoID(p.ID)
}

// Mutation returns the ItemOrdemMutation object of the builder.
func (iou *ItemOrdemUpdate) Mutation() *ItemOrdemMutation {
	return iou.mutation
}

// ClearOrdem clears the "ordem" edge to the Ordem entity.
func (iou *ItemOrdemUpdate) ClearOrdem() *ItemOrdemUpdate {
	iou.mutation.ClearOrdem()
	return iou
}

// ClearProduto clears the "produto" edge to the Produto entity.
func (iou *ItemOrdemUpdate) ClearProduto() *ItemOrdemUpdate {
	iou.mutation.ClearProduto()
	return iou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iou *ItemOrdemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iou.sqlSave, iou.mutation, iou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iou *ItemOrdemUpdate) SaveX(ctx context.Context) int {
	affected, err := iou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iou *ItemOrdemUpdate) Exec(ctx context.Context) error {
	_, err := iou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iou *ItemOrdemUpdate) ExecX(ctx context.Context) {
	if err := iou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iou *ItemOrdemUpdate) check() error {
	if _, ok := iou.mutation.OrdemID(); iou.mutation.OrdemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ItemOrdem.ordem"`)
	}
	if _, ok := iou.mutation.ProdutoID(); iou.mutation.ProdutoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ItemOrdem.produto"`)
	}
	return nil
}

func (iou *ItemOrdemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(itemordem.Table, itemordem.Columns, sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt))
	if ps := iou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iou.mutation.Quantidade(); ok {
		_spec.SetField(itemordem.FieldQuantidade, field.TypeInt, value)
	}
	if value, ok := iou.mutation.AddedQuantidade(); ok {
		_spec.AddField(itemordem.FieldQuantidade, field.TypeInt, value)
	}
	if value, ok := iou.mutation.Preco(); ok {
		_spec.SetField(itemordem.FieldPreco, field.TypeFloat64, value)
	}
	if value, ok := iou.mutation.AddedPreco(); ok {
		_spec.AddField(itemordem.FieldPreco, field.TypeFloat64, value)
	}
	if iou.mutation.OrdemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemordem.OrdemTable,
			Columns: []string{itemordem.OrdemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iou.mutation.OrdemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemordem.OrdemTable,
			Columns: []string{itemordem.OrdemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iou.mutation.ProdutoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemordem.ProdutoTable,
			Columns: []string{itemordem.ProdutoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iou.mutation.ProdutoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemordem.ProdutoTable,
			Columns: []string{itemordem.ProdutoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemordem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iou.mutation.done = true
	return n, nil
}

// ItemOrdemUpdateOne is the builder for updating a single ItemOrdem entity.
type ItemOrdemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemOrdemMutation
}

// SetQuantidade sets the "quantidade" field.
func (iouo *ItemOrdemUpdateOne) SetQuantidade(i int) *ItemOrdemUpdateOne {
	iouo.mutation.ResetQuantidade()
	iouo.mutation.SetQuantidade(i)
	return iouo
}

// SetNillableQuantidade sets the "quantidade" field if the given value is not nil.
func (iouo *ItemOrdemUpdateOne) SetNillableQuantidade(i *int) *ItemOrdemUpdateOne {
	if i != nil {
		iouo.SetQuantidade(*i)
	}
	return iouo
}

// AddQuantidade adds i to the "quantidade" field.
func (iouo *ItemOrdemUpdateOne) AddQuantidade(i int) *ItemOrdemUpdateOne {
	iouo.mutation.AddQuantidade(i)
	return iouo
}

// SetPreco sets the "preco" field.
func (iouo *ItemOrdemUpdateOne) SetPreco(f float64) *ItemOrdemUpdateOne {
	iouo.mutation.ResetPreco()
	iouo.mutation.SetPreco(f)
	return iouo
}

// SetNillablePreco sets the "preco" field if the given value is not nil.
func (iouo *ItemOrdemUpdateOne) SetNillablePreco(f *float64) *ItemOrdemUpdateOne {
	if f != nil {
		iouo.SetPreco(*f)
	}
	return iouo
}

// AddPreco adds f to the "preco" field.
func (iouo *ItemOrdemUpdateOne) AddPreco(f float64) *ItemOrdemUpdateOne {
	iouo.mutation.AddPreco(f)
	return iouo
}

// SetOrdemID sets the "ordem_id" field.
func (iouo *ItemOrdemUpdateOne) SetOrdemID(i int) *ItemOrdemUpdateOne {
	iouo.mutation.SetOrdemID(i)
	return iouo
}

// SetNillableOrdemID sets the "ordem_id" field if the given value is not nil.
func (iouo *ItemOrdemUpdateOne) SetNillableOrdemID(i *int) *ItemOrdemUpdateOne {
	if i != nil {
		iouo.SetOrdemID(*i)
	}
	return iouo
}

// SetProdutoID sets the "produto_id" field.
func (iouo *ItemOrdemUpdateOne) SetProdutoID(i int) *ItemOrdemUpdateOne {
	iouo.mutation.SetProdutoID(i)
	return iouo
}

// SetNillableProdutoID sets the "produto_id" field if the given value is not nil.
func (iouo *ItemOrdemUpdateOne) SetNillableProdutoID(i *int) *ItemOrdemUpdateOne {
	if i != nil {
		iouo.SetProdutoID(*i)
	}
	return iouo
}

// SetOrdem sets the "ordem" edge to the Ordem entity.
func (iouo *ItemOrdemUpdateOne) SetOrdem(o *Ordem) *ItemOrdemUpdateOne {
	return iouo.SetOrdemID(o.ID)
}

// SetProduto sets the "produto" edge to the Produto entity.
func (iouo *ItemOrdemUpdateOne) SetProduto(p *Produto) *ItemOrdemUpdateOne {
	return iouo.SetProdutoID(p.ID)
}

// Mutation returns the ItemOrdemMutation object of the builder.
func (iouo *ItemOrdemUpdateOne) Mutation() *ItemOrdemMutation {
	return iouo.mutation
}

// ClearOrdem clears the "ordem" edge to the Ordem entity.
func (iouo *ItemOrdemUpdateOne) ClearOrdem() *ItemOrdemUpdateOne {
	iouo.mutation.ClearOrdem()
	return iouo
}

// ClearProduto clears the "produto" edge to the Produto entity.
func (iouo *ItemOrdemUpdateOne) ClearProduto() *ItemOrdemUpdateOne {
	iouo.mutation.ClearProduto()
	return iouo
}

// Where appends a list predicates to the ItemOrdemUpdate builder.
func (iouo *ItemOrdemUpdateOne) Where(ps ...predicate.ItemOrdem) *ItemOrdemUpdateOne {
	iouo.mutation.Where(ps...)
	return iouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iouo *ItemOrdemUpdateOne) Select(field string, fields ...string) *ItemOrdemUpdateOne {
	iouo.fields = append([]string{field}, fields...)
	return iouo
}

// Save executes the query and returns the updated ItemOrdem entity.
func (iouo *ItemOrdemUpdateOne) Save(ctx context.Context) (*ItemOrdem, error) {
	return withHooks(ctx, iouo.sqlSave, iouo.mutation, iouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iouo *ItemOrdemUpdateOne) SaveX(ctx context.Context) *ItemOrdem {
	node, err := iouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iouo *ItemOrdemUpdateOne) Exec(ctx context.Context) error {
	_, err := iouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iouo *ItemOrdemUpdateOne) ExecX(ctx context.Context) {
	if err := iouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iouo *ItemOrdemUpdateOne) check() error {
	if _, ok := iouo.mutation.OrdemID(); iouo.mutation.OrdemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ItemOrdem.ordem"`)
	}
	if _, ok := iouo.mutation.ProdutoID(); iouo.mutation.ProdutoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ItemOrdem.produto"`)
	}
	return nil
}

func (iouo *ItemOrdemUpdateOne) sqlSave(ctx context.Context) (_node *ItemOrdem, err error) {
	if err := iouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(itemordem.Table, itemordem.Columns, sqlgraph.NewFieldSpec(itemordem.FieldID, field.TypeInt))
	id, ok := iouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ItemOrdem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, itemordem.FieldID)
		for _, f := range fields {
			if !itemordem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != itemordem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iouo.mutation.Quantidade(); ok {
		_spec.SetField(itemordem.FieldQuantidade, field.TypeInt, value)
	}
	if value, ok := iouo.mutation.AddedQuantidade(); ok {
		_spec.AddField(itemordem.FieldQuantidade, field.TypeInt, value)
	}
	if value, ok := iouo.mutation.Preco(); ok {
		_spec.SetField(itemordem.FieldPreco, field.TypeFloat64, value)
	}
	if value, ok := iouo.mutation.AddedPreco(); ok {
		_spec.AddField(itemordem.FieldPreco, field.TypeFloat64, value)
	}
	if iouo.mutation.OrdemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemordem.OrdemTable,
			Columns: []string{itemordem.OrdemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouo.mutation.OrdemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemordem.OrdemTable,
			Columns: []string{itemordem.OrdemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iouo.mutation.ProdutoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemordem.ProdutoTable,
			Columns: []string{itemordem.ProdutoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouo.mutation.ProdutoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemordem.ProdutoTable,
			Columns: []string{itemordem.ProdutoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(produto.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ItemOrdem{config: iouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemordem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iouo.mutation.done = true
	return _node, nil
}
