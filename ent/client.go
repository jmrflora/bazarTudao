// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/jmrflora/bazarTudao/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jmrflora/bazarTudao/ent/cliente"
	"github.com/jmrflora/bazarTudao/ent/envio"
	"github.com/jmrflora/bazarTudao/ent/itemordem"
	"github.com/jmrflora/bazarTudao/ent/ordem"
	"github.com/jmrflora/bazarTudao/ent/produto"
	"github.com/jmrflora/bazarTudao/ent/stock"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Cliente is the client for interacting with the Cliente builders.
	Cliente *ClienteClient
	// Envio is the client for interacting with the Envio builders.
	Envio *EnvioClient
	// ItemOrdem is the client for interacting with the ItemOrdem builders.
	ItemOrdem *ItemOrdemClient
	// Ordem is the client for interacting with the Ordem builders.
	Ordem *OrdemClient
	// Produto is the client for interacting with the Produto builders.
	Produto *ProdutoClient
	// Stock is the client for interacting with the Stock builders.
	Stock *StockClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Cliente = NewClienteClient(c.config)
	c.Envio = NewEnvioClient(c.config)
	c.ItemOrdem = NewItemOrdemClient(c.config)
	c.Ordem = NewOrdemClient(c.config)
	c.Produto = NewProdutoClient(c.config)
	c.Stock = NewStockClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Cliente:   NewClienteClient(cfg),
		Envio:     NewEnvioClient(cfg),
		ItemOrdem: NewItemOrdemClient(cfg),
		Ordem:     NewOrdemClient(cfg),
		Produto:   NewProdutoClient(cfg),
		Stock:     NewStockClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Cliente:   NewClienteClient(cfg),
		Envio:     NewEnvioClient(cfg),
		ItemOrdem: NewItemOrdemClient(cfg),
		Ordem:     NewOrdemClient(cfg),
		Produto:   NewProdutoClient(cfg),
		Stock:     NewStockClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Cliente.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Cliente, c.Envio, c.ItemOrdem, c.Ordem, c.Produto, c.Stock,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Cliente, c.Envio, c.ItemOrdem, c.Ordem, c.Produto, c.Stock,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ClienteMutation:
		return c.Cliente.mutate(ctx, m)
	case *EnvioMutation:
		return c.Envio.mutate(ctx, m)
	case *ItemOrdemMutation:
		return c.ItemOrdem.mutate(ctx, m)
	case *OrdemMutation:
		return c.Ordem.mutate(ctx, m)
	case *ProdutoMutation:
		return c.Produto.mutate(ctx, m)
	case *StockMutation:
		return c.Stock.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ClienteClient is a client for the Cliente schema.
type ClienteClient struct {
	config
}

// NewClienteClient returns a client for the Cliente from the given config.
func NewClienteClient(c config) *ClienteClient {
	return &ClienteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cliente.Hooks(f(g(h())))`.
func (c *ClienteClient) Use(hooks ...Hook) {
	c.hooks.Cliente = append(c.hooks.Cliente, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cliente.Intercept(f(g(h())))`.
func (c *ClienteClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cliente = append(c.inters.Cliente, interceptors...)
}

// Create returns a builder for creating a Cliente entity.
func (c *ClienteClient) Create() *ClienteCreate {
	mutation := newClienteMutation(c.config, OpCreate)
	return &ClienteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cliente entities.
func (c *ClienteClient) CreateBulk(builders ...*ClienteCreate) *ClienteCreateBulk {
	return &ClienteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ClienteClient) MapCreateBulk(slice any, setFunc func(*ClienteCreate, int)) *ClienteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ClienteCreateBulk{err: fmt.Errorf("calling to ClienteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ClienteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ClienteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cliente.
func (c *ClienteClient) Update() *ClienteUpdate {
	mutation := newClienteMutation(c.config, OpUpdate)
	return &ClienteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClienteClient) UpdateOne(cl *Cliente) *ClienteUpdateOne {
	mutation := newClienteMutation(c.config, OpUpdateOne, withCliente(cl))
	return &ClienteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClienteClient) UpdateOneID(id int) *ClienteUpdateOne {
	mutation := newClienteMutation(c.config, OpUpdateOne, withClienteID(id))
	return &ClienteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cliente.
func (c *ClienteClient) Delete() *ClienteDelete {
	mutation := newClienteMutation(c.config, OpDelete)
	return &ClienteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClienteClient) DeleteOne(cl *Cliente) *ClienteDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClienteClient) DeleteOneID(id int) *ClienteDeleteOne {
	builder := c.Delete().Where(cliente.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClienteDeleteOne{builder}
}

// Query returns a query builder for Cliente.
func (c *ClienteClient) Query() *ClienteQuery {
	return &ClienteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCliente},
		inters: c.Interceptors(),
	}
}

// Get returns a Cliente entity by its id.
func (c *ClienteClient) Get(ctx context.Context, id int) (*Cliente, error) {
	return c.Query().Where(cliente.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClienteClient) GetX(ctx context.Context, id int) *Cliente {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrdens queries the ordens edge of a Cliente.
func (c *ClienteClient) QueryOrdens(cl *Cliente) *OrdemQuery {
	query := (&OrdemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cliente.Table, cliente.FieldID, id),
			sqlgraph.To(ordem.Table, ordem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cliente.OrdensTable, cliente.OrdensColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClienteClient) Hooks() []Hook {
	return c.hooks.Cliente
}

// Interceptors returns the client interceptors.
func (c *ClienteClient) Interceptors() []Interceptor {
	return c.inters.Cliente
}

func (c *ClienteClient) mutate(ctx context.Context, m *ClienteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClienteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClienteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClienteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClienteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cliente mutation op: %q", m.Op())
	}
}

// EnvioClient is a client for the Envio schema.
type EnvioClient struct {
	config
}

// NewEnvioClient returns a client for the Envio from the given config.
func NewEnvioClient(c config) *EnvioClient {
	return &EnvioClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `envio.Hooks(f(g(h())))`.
func (c *EnvioClient) Use(hooks ...Hook) {
	c.hooks.Envio = append(c.hooks.Envio, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `envio.Intercept(f(g(h())))`.
func (c *EnvioClient) Intercept(interceptors ...Interceptor) {
	c.inters.Envio = append(c.inters.Envio, interceptors...)
}

// Create returns a builder for creating a Envio entity.
func (c *EnvioClient) Create() *EnvioCreate {
	mutation := newEnvioMutation(c.config, OpCreate)
	return &EnvioCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Envio entities.
func (c *EnvioClient) CreateBulk(builders ...*EnvioCreate) *EnvioCreateBulk {
	return &EnvioCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EnvioClient) MapCreateBulk(slice any, setFunc func(*EnvioCreate, int)) *EnvioCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EnvioCreateBulk{err: fmt.Errorf("calling to EnvioClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EnvioCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EnvioCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Envio.
func (c *EnvioClient) Update() *EnvioUpdate {
	mutation := newEnvioMutation(c.config, OpUpdate)
	return &EnvioUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnvioClient) UpdateOne(e *Envio) *EnvioUpdateOne {
	mutation := newEnvioMutation(c.config, OpUpdateOne, withEnvio(e))
	return &EnvioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnvioClient) UpdateOneID(id int) *EnvioUpdateOne {
	mutation := newEnvioMutation(c.config, OpUpdateOne, withEnvioID(id))
	return &EnvioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Envio.
func (c *EnvioClient) Delete() *EnvioDelete {
	mutation := newEnvioMutation(c.config, OpDelete)
	return &EnvioDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnvioClient) DeleteOne(e *Envio) *EnvioDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnvioClient) DeleteOneID(id int) *EnvioDeleteOne {
	builder := c.Delete().Where(envio.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnvioDeleteOne{builder}
}

// Query returns a query builder for Envio.
func (c *EnvioClient) Query() *EnvioQuery {
	return &EnvioQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnvio},
		inters: c.Interceptors(),
	}
}

// Get returns a Envio entity by its id.
func (c *EnvioClient) Get(ctx context.Context, id int) (*Envio, error) {
	return c.Query().Where(envio.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnvioClient) GetX(ctx context.Context, id int) *Envio {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItens queries the itens edge of a Envio.
func (c *EnvioClient) QueryItens(e *Envio) *ItemOrdemQuery {
	query := (&ItemOrdemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(envio.Table, envio.FieldID, id),
			sqlgraph.To(itemordem.Table, itemordem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, envio.ItensTable, envio.ItensColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnvioClient) Hooks() []Hook {
	return c.hooks.Envio
}

// Interceptors returns the client interceptors.
func (c *EnvioClient) Interceptors() []Interceptor {
	return c.inters.Envio
}

func (c *EnvioClient) mutate(ctx context.Context, m *EnvioMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnvioCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnvioUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnvioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnvioDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Envio mutation op: %q", m.Op())
	}
}

// ItemOrdemClient is a client for the ItemOrdem schema.
type ItemOrdemClient struct {
	config
}

// NewItemOrdemClient returns a client for the ItemOrdem from the given config.
func NewItemOrdemClient(c config) *ItemOrdemClient {
	return &ItemOrdemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `itemordem.Hooks(f(g(h())))`.
func (c *ItemOrdemClient) Use(hooks ...Hook) {
	c.hooks.ItemOrdem = append(c.hooks.ItemOrdem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `itemordem.Intercept(f(g(h())))`.
func (c *ItemOrdemClient) Intercept(interceptors ...Interceptor) {
	c.inters.ItemOrdem = append(c.inters.ItemOrdem, interceptors...)
}

// Create returns a builder for creating a ItemOrdem entity.
func (c *ItemOrdemClient) Create() *ItemOrdemCreate {
	mutation := newItemOrdemMutation(c.config, OpCreate)
	return &ItemOrdemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ItemOrdem entities.
func (c *ItemOrdemClient) CreateBulk(builders ...*ItemOrdemCreate) *ItemOrdemCreateBulk {
	return &ItemOrdemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ItemOrdemClient) MapCreateBulk(slice any, setFunc func(*ItemOrdemCreate, int)) *ItemOrdemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ItemOrdemCreateBulk{err: fmt.Errorf("calling to ItemOrdemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ItemOrdemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ItemOrdemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ItemOrdem.
func (c *ItemOrdemClient) Update() *ItemOrdemUpdate {
	mutation := newItemOrdemMutation(c.config, OpUpdate)
	return &ItemOrdemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ItemOrdemClient) UpdateOne(io *ItemOrdem) *ItemOrdemUpdateOne {
	mutation := newItemOrdemMutation(c.config, OpUpdateOne, withItemOrdem(io))
	return &ItemOrdemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ItemOrdemClient) UpdateOneID(id int) *ItemOrdemUpdateOne {
	mutation := newItemOrdemMutation(c.config, OpUpdateOne, withItemOrdemID(id))
	return &ItemOrdemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ItemOrdem.
func (c *ItemOrdemClient) Delete() *ItemOrdemDelete {
	mutation := newItemOrdemMutation(c.config, OpDelete)
	return &ItemOrdemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ItemOrdemClient) DeleteOne(io *ItemOrdem) *ItemOrdemDeleteOne {
	return c.DeleteOneID(io.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ItemOrdemClient) DeleteOneID(id int) *ItemOrdemDeleteOne {
	builder := c.Delete().Where(itemordem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ItemOrdemDeleteOne{builder}
}

// Query returns a query builder for ItemOrdem.
func (c *ItemOrdemClient) Query() *ItemOrdemQuery {
	return &ItemOrdemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeItemOrdem},
		inters: c.Interceptors(),
	}
}

// Get returns a ItemOrdem entity by its id.
func (c *ItemOrdemClient) Get(ctx context.Context, id int) (*ItemOrdem, error) {
	return c.Query().Where(itemordem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ItemOrdemClient) GetX(ctx context.Context, id int) *ItemOrdem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrdem queries the ordem edge of a ItemOrdem.
func (c *ItemOrdemClient) QueryOrdem(io *ItemOrdem) *OrdemQuery {
	query := (&OrdemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := io.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemordem.Table, itemordem.FieldID, id),
			sqlgraph.To(ordem.Table, ordem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, itemordem.OrdemTable, itemordem.OrdemColumn),
		)
		fromV = sqlgraph.Neighbors(io.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduto queries the produto edge of a ItemOrdem.
func (c *ItemOrdemClient) QueryProduto(io *ItemOrdem) *ProdutoQuery {
	query := (&ProdutoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := io.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemordem.Table, itemordem.FieldID, id),
			sqlgraph.To(produto.Table, produto.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, itemordem.ProdutoTable, itemordem.ProdutoColumn),
		)
		fromV = sqlgraph.Neighbors(io.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvio queries the envio edge of a ItemOrdem.
func (c *ItemOrdemClient) QueryEnvio(io *ItemOrdem) *EnvioQuery {
	query := (&EnvioClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := io.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemordem.Table, itemordem.FieldID, id),
			sqlgraph.To(envio.Table, envio.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, itemordem.EnvioTable, itemordem.EnvioColumn),
		)
		fromV = sqlgraph.Neighbors(io.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ItemOrdemClient) Hooks() []Hook {
	return c.hooks.ItemOrdem
}

// Interceptors returns the client interceptors.
func (c *ItemOrdemClient) Interceptors() []Interceptor {
	return c.inters.ItemOrdem
}

func (c *ItemOrdemClient) mutate(ctx context.Context, m *ItemOrdemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ItemOrdemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ItemOrdemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ItemOrdemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ItemOrdemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ItemOrdem mutation op: %q", m.Op())
	}
}

// OrdemClient is a client for the Ordem schema.
type OrdemClient struct {
	config
}

// NewOrdemClient returns a client for the Ordem from the given config.
func NewOrdemClient(c config) *OrdemClient {
	return &OrdemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordem.Hooks(f(g(h())))`.
func (c *OrdemClient) Use(hooks ...Hook) {
	c.hooks.Ordem = append(c.hooks.Ordem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ordem.Intercept(f(g(h())))`.
func (c *OrdemClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ordem = append(c.inters.Ordem, interceptors...)
}

// Create returns a builder for creating a Ordem entity.
func (c *OrdemClient) Create() *OrdemCreate {
	mutation := newOrdemMutation(c.config, OpCreate)
	return &OrdemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ordem entities.
func (c *OrdemClient) CreateBulk(builders ...*OrdemCreate) *OrdemCreateBulk {
	return &OrdemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrdemClient) MapCreateBulk(slice any, setFunc func(*OrdemCreate, int)) *OrdemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrdemCreateBulk{err: fmt.Errorf("calling to OrdemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrdemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrdemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ordem.
func (c *OrdemClient) Update() *OrdemUpdate {
	mutation := newOrdemMutation(c.config, OpUpdate)
	return &OrdemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrdemClient) UpdateOne(o *Ordem) *OrdemUpdateOne {
	mutation := newOrdemMutation(c.config, OpUpdateOne, withOrdem(o))
	return &OrdemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrdemClient) UpdateOneID(id int) *OrdemUpdateOne {
	mutation := newOrdemMutation(c.config, OpUpdateOne, withOrdemID(id))
	return &OrdemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ordem.
func (c *OrdemClient) Delete() *OrdemDelete {
	mutation := newOrdemMutation(c.config, OpDelete)
	return &OrdemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrdemClient) DeleteOne(o *Ordem) *OrdemDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrdemClient) DeleteOneID(id int) *OrdemDeleteOne {
	builder := c.Delete().Where(ordem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrdemDeleteOne{builder}
}

// Query returns a query builder for Ordem.
func (c *OrdemClient) Query() *OrdemQuery {
	return &OrdemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrdem},
		inters: c.Interceptors(),
	}
}

// Get returns a Ordem entity by its id.
func (c *OrdemClient) Get(ctx context.Context, id int) (*Ordem, error) {
	return c.Query().Where(ordem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrdemClient) GetX(ctx context.Context, id int) *Ordem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProdutos queries the produtos edge of a Ordem.
func (c *OrdemClient) QueryProdutos(o *Ordem) *ProdutoQuery {
	query := (&ProdutoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordem.Table, ordem.FieldID, id),
			sqlgraph.To(produto.Table, produto.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ordem.ProdutosTable, ordem.ProdutosPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClientes queries the clientes edge of a Ordem.
func (c *OrdemClient) QueryClientes(o *Ordem) *ClienteQuery {
	query := (&ClienteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordem.Table, ordem.FieldID, id),
			sqlgraph.To(cliente.Table, cliente.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ordem.ClientesTable, ordem.ClientesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItems queries the items edge of a Ordem.
func (c *OrdemClient) QueryItems(o *Ordem) *ItemOrdemQuery {
	query := (&ItemOrdemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordem.Table, ordem.FieldID, id),
			sqlgraph.To(itemordem.Table, itemordem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ordem.ItemsTable, ordem.ItemsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrdemClient) Hooks() []Hook {
	return c.hooks.Ordem
}

// Interceptors returns the client interceptors.
func (c *OrdemClient) Interceptors() []Interceptor {
	return c.inters.Ordem
}

func (c *OrdemClient) mutate(ctx context.Context, m *OrdemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrdemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrdemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrdemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrdemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ordem mutation op: %q", m.Op())
	}
}

// ProdutoClient is a client for the Produto schema.
type ProdutoClient struct {
	config
}

// NewProdutoClient returns a client for the Produto from the given config.
func NewProdutoClient(c config) *ProdutoClient {
	return &ProdutoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `produto.Hooks(f(g(h())))`.
func (c *ProdutoClient) Use(hooks ...Hook) {
	c.hooks.Produto = append(c.hooks.Produto, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `produto.Intercept(f(g(h())))`.
func (c *ProdutoClient) Intercept(interceptors ...Interceptor) {
	c.inters.Produto = append(c.inters.Produto, interceptors...)
}

// Create returns a builder for creating a Produto entity.
func (c *ProdutoClient) Create() *ProdutoCreate {
	mutation := newProdutoMutation(c.config, OpCreate)
	return &ProdutoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Produto entities.
func (c *ProdutoClient) CreateBulk(builders ...*ProdutoCreate) *ProdutoCreateBulk {
	return &ProdutoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProdutoClient) MapCreateBulk(slice any, setFunc func(*ProdutoCreate, int)) *ProdutoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProdutoCreateBulk{err: fmt.Errorf("calling to ProdutoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProdutoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProdutoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Produto.
func (c *ProdutoClient) Update() *ProdutoUpdate {
	mutation := newProdutoMutation(c.config, OpUpdate)
	return &ProdutoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProdutoClient) UpdateOne(pr *Produto) *ProdutoUpdateOne {
	mutation := newProdutoMutation(c.config, OpUpdateOne, withProduto(pr))
	return &ProdutoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProdutoClient) UpdateOneID(id int) *ProdutoUpdateOne {
	mutation := newProdutoMutation(c.config, OpUpdateOne, withProdutoID(id))
	return &ProdutoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Produto.
func (c *ProdutoClient) Delete() *ProdutoDelete {
	mutation := newProdutoMutation(c.config, OpDelete)
	return &ProdutoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProdutoClient) DeleteOne(pr *Produto) *ProdutoDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProdutoClient) DeleteOneID(id int) *ProdutoDeleteOne {
	builder := c.Delete().Where(produto.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProdutoDeleteOne{builder}
}

// Query returns a query builder for Produto.
func (c *ProdutoClient) Query() *ProdutoQuery {
	return &ProdutoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProduto},
		inters: c.Interceptors(),
	}
}

// Get returns a Produto entity by its id.
func (c *ProdutoClient) Get(ctx context.Context, id int) (*Produto, error) {
	return c.Query().Where(produto.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProdutoClient) GetX(ctx context.Context, id int) *Produto {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrdens queries the ordens edge of a Produto.
func (c *ProdutoClient) QueryOrdens(pr *Produto) *OrdemQuery {
	query := (&OrdemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(produto.Table, produto.FieldID, id),
			sqlgraph.To(ordem.Table, ordem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, produto.OrdensTable, produto.OrdensPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStock queries the stock edge of a Produto.
func (c *ProdutoClient) QueryStock(pr *Produto) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(produto.Table, produto.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, produto.StockTable, produto.StockColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItens queries the itens edge of a Produto.
func (c *ProdutoClient) QueryItens(pr *Produto) *ItemOrdemQuery {
	query := (&ItemOrdemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(produto.Table, produto.FieldID, id),
			sqlgraph.To(itemordem.Table, itemordem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, produto.ItensTable, produto.ItensColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProdutoClient) Hooks() []Hook {
	return c.hooks.Produto
}

// Interceptors returns the client interceptors.
func (c *ProdutoClient) Interceptors() []Interceptor {
	return c.inters.Produto
}

func (c *ProdutoClient) mutate(ctx context.Context, m *ProdutoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProdutoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProdutoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProdutoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProdutoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Produto mutation op: %q", m.Op())
	}
}

// StockClient is a client for the Stock schema.
type StockClient struct {
	config
}

// NewStockClient returns a client for the Stock from the given config.
func NewStockClient(c config) *StockClient {
	return &StockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stock.Hooks(f(g(h())))`.
func (c *StockClient) Use(hooks ...Hook) {
	c.hooks.Stock = append(c.hooks.Stock, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `stock.Intercept(f(g(h())))`.
func (c *StockClient) Intercept(interceptors ...Interceptor) {
	c.inters.Stock = append(c.inters.Stock, interceptors...)
}

// Create returns a builder for creating a Stock entity.
func (c *StockClient) Create() *StockCreate {
	mutation := newStockMutation(c.config, OpCreate)
	return &StockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Stock entities.
func (c *StockClient) CreateBulk(builders ...*StockCreate) *StockCreateBulk {
	return &StockCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StockClient) MapCreateBulk(slice any, setFunc func(*StockCreate, int)) *StockCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StockCreateBulk{err: fmt.Errorf("calling to StockClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StockCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Stock.
func (c *StockClient) Update() *StockUpdate {
	mutation := newStockMutation(c.config, OpUpdate)
	return &StockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StockClient) UpdateOne(s *Stock) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStock(s))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StockClient) UpdateOneID(id int) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStockID(id))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Stock.
func (c *StockClient) Delete() *StockDelete {
	mutation := newStockMutation(c.config, OpDelete)
	return &StockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StockClient) DeleteOne(s *Stock) *StockDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StockClient) DeleteOneID(id int) *StockDeleteOne {
	builder := c.Delete().Where(stock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StockDeleteOne{builder}
}

// Query returns a query builder for Stock.
func (c *StockClient) Query() *StockQuery {
	return &StockQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStock},
		inters: c.Interceptors(),
	}
}

// Get returns a Stock entity by its id.
func (c *StockClient) Get(ctx context.Context, id int) (*Stock, error) {
	return c.Query().Where(stock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StockClient) GetX(ctx context.Context, id int) *Stock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProdutos queries the produtos edge of a Stock.
func (c *StockClient) QueryProdutos(s *Stock) *ProdutoQuery {
	query := (&ProdutoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(produto.Table, produto.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, stock.ProdutosTable, stock.ProdutosColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StockClient) Hooks() []Hook {
	return c.hooks.Stock
}

// Interceptors returns the client interceptors.
func (c *StockClient) Interceptors() []Interceptor {
	return c.inters.Stock
}

func (c *StockClient) mutate(ctx context.Context, m *StockMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StockCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StockUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StockDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Stock mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Cliente, Envio, ItemOrdem, Ordem, Produto, Stock []ent.Hook
	}
	inters struct {
		Cliente, Envio, ItemOrdem, Ordem, Produto, Stock []ent.Interceptor
	}
)
